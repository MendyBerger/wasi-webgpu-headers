// Generated by `wit-bindgen` 0.32.0. DO NOT EDIT!
#ifndef __BINDINGS_IMPORTS_H
#define __BINDINGS_IMPORTS_H
#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

typedef struct imports_string_t {
  uint8_t*ptr;
  size_t len;
} imports_string_t;

typedef struct wasi_webgpu_graphics_context_own_context_t {
  int32_t __handle;
} wasi_webgpu_graphics_context_own_context_t;

typedef struct wasi_webgpu_graphics_context_borrow_context_t {
  int32_t __handle;
} wasi_webgpu_graphics_context_borrow_context_t;

typedef struct wasi_webgpu_graphics_context_own_abstract_buffer_t {
  int32_t __handle;
} wasi_webgpu_graphics_context_own_abstract_buffer_t;

typedef struct wasi_webgpu_graphics_context_borrow_abstract_buffer_t {
  int32_t __handle;
} wasi_webgpu_graphics_context_borrow_abstract_buffer_t;

typedef struct wasi_webgpu_webgpu_own_gpu_supported_limits_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_supported_limits_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_supported_limits_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_supported_limits_t;

typedef struct wasi_webgpu_webgpu_own_gpu_supported_features_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_supported_features_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_supported_features_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_supported_features_t;

typedef struct wasi_webgpu_webgpu_own_wgsl_language_features_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_wgsl_language_features_t;

typedef struct wasi_webgpu_webgpu_borrow_wgsl_language_features_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_wgsl_language_features_t;

typedef struct wasi_webgpu_webgpu_own_gpu_adapter_info_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_adapter_info_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_adapter_info_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_adapter_info_t;

typedef struct wasi_webgpu_webgpu_own_gpu_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_power_preference_t;

#define WASI_WEBGPU_WEBGPU_GPU_POWER_PREFERENCE_LOW_POWER 0
#define WASI_WEBGPU_WEBGPU_GPU_POWER_PREFERENCE_HIGH_PERFORMANCE 1

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_power_preference_t val;
} wasi_webgpu_webgpu_option_gpu_power_preference_t;

typedef struct {
  bool is_some;
  bool val;
} imports_option_bool_t;

typedef struct wasi_webgpu_webgpu_gpu_request_adapter_options_t {
  wasi_webgpu_webgpu_option_gpu_power_preference_t   power_preference;
  imports_option_bool_t   force_fallback_adapter;
} wasi_webgpu_webgpu_gpu_request_adapter_options_t;

typedef struct wasi_webgpu_webgpu_own_gpu_adapter_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_adapter_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_adapter_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_adapter_t;

typedef struct wasi_webgpu_webgpu_own_record_gpu_size64_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_record_gpu_size64_t;

typedef struct wasi_webgpu_webgpu_borrow_record_gpu_size64_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_record_gpu_size64_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_feature_name_t;

#define WASI_WEBGPU_WEBGPU_GPU_FEATURE_NAME_DEPTH_CLIP_CONTROL 0
#define WASI_WEBGPU_WEBGPU_GPU_FEATURE_NAME_DEPTH32FLOAT_STENCIL8 1
#define WASI_WEBGPU_WEBGPU_GPU_FEATURE_NAME_TEXTURE_COMPRESSION_BC 2
#define WASI_WEBGPU_WEBGPU_GPU_FEATURE_NAME_TEXTURE_COMPRESSION_BC_SLICED3D 3
#define WASI_WEBGPU_WEBGPU_GPU_FEATURE_NAME_TEXTURE_COMPRESSION_ETC2 4
#define WASI_WEBGPU_WEBGPU_GPU_FEATURE_NAME_TEXTURE_COMPRESSION_ASTC 5
#define WASI_WEBGPU_WEBGPU_GPU_FEATURE_NAME_TIMESTAMP_QUERY 6
#define WASI_WEBGPU_WEBGPU_GPU_FEATURE_NAME_INDIRECT_FIRST_INSTANCE 7
#define WASI_WEBGPU_WEBGPU_GPU_FEATURE_NAME_SHADER_F16 8
#define WASI_WEBGPU_WEBGPU_GPU_FEATURE_NAME_RG11B10UFLOAT_RENDERABLE 9
#define WASI_WEBGPU_WEBGPU_GPU_FEATURE_NAME_BGRA8UNORM_STORAGE 10
#define WASI_WEBGPU_WEBGPU_GPU_FEATURE_NAME_FLOAT32_FILTERABLE 11
#define WASI_WEBGPU_WEBGPU_GPU_FEATURE_NAME_CLIP_DISTANCES 12
#define WASI_WEBGPU_WEBGPU_GPU_FEATURE_NAME_DUAL_SOURCE_BLENDING 13

typedef struct wasi_webgpu_webgpu_own_gpu_device_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_device_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_device_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_device_t;

typedef struct wasi_webgpu_webgpu_own_gpu_buffer_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_buffer_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_buffer_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_buffer_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_buffer_map_state_t;

#define WASI_WEBGPU_WEBGPU_GPU_BUFFER_MAP_STATE_UNMAPPED 0
#define WASI_WEBGPU_WEBGPU_GPU_BUFFER_MAP_STATE_PENDING 1
#define WASI_WEBGPU_WEBGPU_GPU_BUFFER_MAP_STATE_MAPPED 2

typedef uint32_t wasi_webgpu_webgpu_gpu_buffer_usage_flags_t;

typedef struct wasi_webgpu_webgpu_own_gpu_buffer_usage_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_buffer_usage_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_buffer_usage_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_buffer_usage_t;

typedef uint32_t wasi_webgpu_webgpu_gpu_map_mode_flags_t;

typedef struct wasi_webgpu_webgpu_own_gpu_map_mode_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_map_mode_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_map_mode_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_map_mode_t;

typedef struct wasi_webgpu_webgpu_own_gpu_texture_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_texture_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_texture_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_texture_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_texture_dimension_t;

#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_DIMENSION_D1 0
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_DIMENSION_D2 1
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_DIMENSION_D3 2

typedef uint32_t wasi_webgpu_webgpu_gpu_texture_usage_flags_t;

typedef struct wasi_webgpu_webgpu_own_gpu_texture_usage_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_texture_usage_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_texture_usage_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_texture_usage_t;

typedef struct wasi_webgpu_webgpu_own_gpu_texture_view_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_texture_view_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_texture_view_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_texture_view_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_texture_view_dimension_t;

#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_VIEW_DIMENSION_D1 0
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_VIEW_DIMENSION_D2 1
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_VIEW_DIMENSION_D2_ARRAY 2
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_VIEW_DIMENSION_CUBE 3
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_VIEW_DIMENSION_CUBE_ARRAY 4
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_VIEW_DIMENSION_D3 5

typedef uint8_t wasi_webgpu_webgpu_gpu_texture_aspect_t;

#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_ASPECT_ALL 0
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_ASPECT_STENCIL_ONLY 1
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_ASPECT_DEPTH_ONLY 2

typedef uint8_t wasi_webgpu_webgpu_gpu_texture_format_t;

#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_R8UNORM 0
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_R8SNORM 1
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_R8UINT 2
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_R8SINT 3
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_R16UINT 4
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_R16SINT 5
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_R16FLOAT 6
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RG8UNORM 7
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RG8SNORM 8
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RG8UINT 9
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RG8SINT 10
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_R32UINT 11
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_R32SINT 12
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_R32FLOAT 13
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RG16UINT 14
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RG16SINT 15
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RG16FLOAT 16
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RGBA8UNORM 17
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RGBA8UNORM_SRGB 18
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RGBA8SNORM 19
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RGBA8UINT 20
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RGBA8SINT 21
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_BGRA8UNORM 22
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_BGRA8UNORM_SRGB 23
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RGB9E5UFLOAT 24
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RGB10A2UINT 25
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RGB10A2UNORM 26
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RG11B10UFLOAT 27
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RG32UINT 28
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RG32SINT 29
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RG32FLOAT 30
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RGBA16UINT 31
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RGBA16SINT 32
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RGBA16FLOAT 33
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RGBA32UINT 34
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RGBA32SINT 35
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_RGBA32FLOAT 36
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_STENCIL8 37
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_DEPTH16UNORM 38
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_DEPTH24PLUS 39
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_DEPTH24PLUS_STENCIL8 40
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_DEPTH32FLOAT 41
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_DEPTH32FLOAT_STENCIL8 42
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_BC1_RGBA_UNORM 43
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_BC1_RGBA_UNORM_SRGB 44
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_BC2_RGBA_UNORM 45
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_BC2_RGBA_UNORM_SRGB 46
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_BC3_RGBA_UNORM 47
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_BC3_RGBA_UNORM_SRGB 48
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_BC4_R_UNORM 49
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_BC4_R_SNORM 50
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_BC5_RG_UNORM 51
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_BC5_RG_SNORM 52
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_BC6H_RGB_UFLOAT 53
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_BC6H_RGB_FLOAT 54
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_BC7_RGBA_UNORM 55
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_BC7_RGBA_UNORM_SRGB 56
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ETC2_RGB8UNORM 57
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ETC2_RGB8UNORM_SRGB 58
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ETC2_RGB8A1UNORM 59
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ETC2_RGB8A1UNORM_SRGB 60
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ETC2_RGBA8UNORM 61
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ETC2_RGBA8UNORM_SRGB 62
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_EAC_R11UNORM 63
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_EAC_R11SNORM 64
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_EAC_RG11UNORM 65
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_EAC_RG11SNORM 66
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC4X4_UNORM 67
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC4X4_UNORM_SRGB 68
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC5X4_UNORM 69
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC5X4_UNORM_SRGB 70
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC5X5_UNORM 71
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC5X5_UNORM_SRGB 72
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC6X5_UNORM 73
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC6X5_UNORM_SRGB 74
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC6X6_UNORM 75
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC6X6_UNORM_SRGB 76
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC8X5_UNORM 77
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC8X5_UNORM_SRGB 78
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC8X6_UNORM 79
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC8X6_UNORM_SRGB 80
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC8X8_UNORM 81
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC8X8_UNORM_SRGB 82
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC10X5_UNORM 83
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC10X5_UNORM_SRGB 84
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC10X6_UNORM 85
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC10X6_UNORM_SRGB 86
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC10X8_UNORM 87
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC10X8_UNORM_SRGB 88
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC10X10_UNORM 89
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC10X10_UNORM_SRGB 90
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC12X10_UNORM 91
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC12X10_UNORM_SRGB 92
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC12X12_UNORM 93
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_FORMAT_ASTC12X12_UNORM_SRGB 94

typedef struct wasi_webgpu_webgpu_own_gpu_sampler_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_sampler_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_sampler_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_sampler_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_address_mode_t;

#define WASI_WEBGPU_WEBGPU_GPU_ADDRESS_MODE_CLAMP_TO_EDGE 0
#define WASI_WEBGPU_WEBGPU_GPU_ADDRESS_MODE_REPEAT 1
#define WASI_WEBGPU_WEBGPU_GPU_ADDRESS_MODE_MIRROR_REPEAT 2

typedef uint8_t wasi_webgpu_webgpu_gpu_filter_mode_t;

#define WASI_WEBGPU_WEBGPU_GPU_FILTER_MODE_NEAREST 0
#define WASI_WEBGPU_WEBGPU_GPU_FILTER_MODE_LINEAR 1

typedef uint8_t wasi_webgpu_webgpu_gpu_mipmap_filter_mode_t;

#define WASI_WEBGPU_WEBGPU_GPU_MIPMAP_FILTER_MODE_NEAREST 0
#define WASI_WEBGPU_WEBGPU_GPU_MIPMAP_FILTER_MODE_LINEAR 1

typedef uint8_t wasi_webgpu_webgpu_gpu_compare_function_t;

#define WASI_WEBGPU_WEBGPU_GPU_COMPARE_FUNCTION_NEVER 0
#define WASI_WEBGPU_WEBGPU_GPU_COMPARE_FUNCTION_LESS 1
#define WASI_WEBGPU_WEBGPU_GPU_COMPARE_FUNCTION_EQUAL 2
#define WASI_WEBGPU_WEBGPU_GPU_COMPARE_FUNCTION_LESS_EQUAL 3
#define WASI_WEBGPU_WEBGPU_GPU_COMPARE_FUNCTION_GREATER 4
#define WASI_WEBGPU_WEBGPU_GPU_COMPARE_FUNCTION_NOT_EQUAL 5
#define WASI_WEBGPU_WEBGPU_GPU_COMPARE_FUNCTION_GREATER_EQUAL 6
#define WASI_WEBGPU_WEBGPU_GPU_COMPARE_FUNCTION_ALWAYS 7

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_address_mode_t val;
} wasi_webgpu_webgpu_option_gpu_address_mode_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_filter_mode_t val;
} wasi_webgpu_webgpu_option_gpu_filter_mode_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_mipmap_filter_mode_t val;
} wasi_webgpu_webgpu_option_gpu_mipmap_filter_mode_t;

typedef struct {
  bool is_some;
  float val;
} imports_option_f32_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_compare_function_t val;
} wasi_webgpu_webgpu_option_gpu_compare_function_t;

typedef struct {
  bool is_some;
  uint16_t val;
} imports_option_u16_t;

typedef struct {
  bool is_some;
  imports_string_t val;
} imports_option_string_t;

typedef struct wasi_webgpu_webgpu_gpu_sampler_descriptor_t {
  wasi_webgpu_webgpu_option_gpu_address_mode_t   address_mode_u;
  wasi_webgpu_webgpu_option_gpu_address_mode_t   address_mode_v;
  wasi_webgpu_webgpu_option_gpu_address_mode_t   address_mode_w;
  wasi_webgpu_webgpu_option_gpu_filter_mode_t   mag_filter;
  wasi_webgpu_webgpu_option_gpu_filter_mode_t   min_filter;
  wasi_webgpu_webgpu_option_gpu_mipmap_filter_mode_t   mipmap_filter;
  imports_option_f32_t   lod_min_clamp;
  imports_option_f32_t   lod_max_clamp;
  wasi_webgpu_webgpu_option_gpu_compare_function_t   compare;
  imports_option_u16_t   max_anisotropy;
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_sampler_descriptor_t;

typedef struct wasi_webgpu_webgpu_own_gpu_bind_group_layout_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_bind_group_layout_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_bind_group_layout_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_bind_group_layout_t;

typedef uint32_t wasi_webgpu_webgpu_gpu_shader_stage_flags_t;

typedef struct wasi_webgpu_webgpu_own_gpu_shader_stage_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_shader_stage_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_shader_stage_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_shader_stage_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_buffer_binding_type_t;

#define WASI_WEBGPU_WEBGPU_GPU_BUFFER_BINDING_TYPE_UNIFORM 0
#define WASI_WEBGPU_WEBGPU_GPU_BUFFER_BINDING_TYPE_STORAGE 1
#define WASI_WEBGPU_WEBGPU_GPU_BUFFER_BINDING_TYPE_READ_ONLY_STORAGE 2

typedef uint8_t wasi_webgpu_webgpu_gpu_sampler_binding_type_t;

#define WASI_WEBGPU_WEBGPU_GPU_SAMPLER_BINDING_TYPE_FILTERING 0
#define WASI_WEBGPU_WEBGPU_GPU_SAMPLER_BINDING_TYPE_NON_FILTERING 1
#define WASI_WEBGPU_WEBGPU_GPU_SAMPLER_BINDING_TYPE_COMPARISON 2

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_sampler_binding_type_t val;
} wasi_webgpu_webgpu_option_gpu_sampler_binding_type_t;

typedef struct wasi_webgpu_webgpu_gpu_sampler_binding_layout_t {
  wasi_webgpu_webgpu_option_gpu_sampler_binding_type_t   type;
} wasi_webgpu_webgpu_gpu_sampler_binding_layout_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_texture_sample_type_t;

#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_SAMPLE_TYPE_FLOAT 0
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_SAMPLE_TYPE_UNFILTERABLE_FLOAT 1
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_SAMPLE_TYPE_DEPTH 2
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_SAMPLE_TYPE_SINT 3
#define WASI_WEBGPU_WEBGPU_GPU_TEXTURE_SAMPLE_TYPE_UINT 4

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_texture_sample_type_t val;
} wasi_webgpu_webgpu_option_gpu_texture_sample_type_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_texture_view_dimension_t val;
} wasi_webgpu_webgpu_option_gpu_texture_view_dimension_t;

typedef struct wasi_webgpu_webgpu_gpu_texture_binding_layout_t {
  wasi_webgpu_webgpu_option_gpu_texture_sample_type_t   sample_type;
  wasi_webgpu_webgpu_option_gpu_texture_view_dimension_t   view_dimension;
  imports_option_bool_t   multisampled;
} wasi_webgpu_webgpu_gpu_texture_binding_layout_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_storage_texture_access_t;

#define WASI_WEBGPU_WEBGPU_GPU_STORAGE_TEXTURE_ACCESS_WRITE_ONLY 0
#define WASI_WEBGPU_WEBGPU_GPU_STORAGE_TEXTURE_ACCESS_READ_ONLY 1
#define WASI_WEBGPU_WEBGPU_GPU_STORAGE_TEXTURE_ACCESS_READ_WRITE 2

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_storage_texture_access_t val;
} wasi_webgpu_webgpu_option_gpu_storage_texture_access_t;

typedef struct wasi_webgpu_webgpu_gpu_storage_texture_binding_layout_t {
  wasi_webgpu_webgpu_option_gpu_storage_texture_access_t   access;
  wasi_webgpu_webgpu_gpu_texture_format_t   format;
  wasi_webgpu_webgpu_option_gpu_texture_view_dimension_t   view_dimension;
} wasi_webgpu_webgpu_gpu_storage_texture_binding_layout_t;

typedef struct wasi_webgpu_webgpu_own_gpu_bind_group_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_bind_group_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_bind_group_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_bind_group_t;

typedef struct wasi_webgpu_webgpu_own_gpu_pipeline_layout_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_pipeline_layout_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_pipeline_layout_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_pipeline_layout_t;

typedef struct {
  wasi_webgpu_webgpu_borrow_gpu_bind_group_layout_t *ptr;
  size_t len;
} wasi_webgpu_webgpu_list_borrow_gpu_bind_group_layout_t;

typedef struct wasi_webgpu_webgpu_gpu_pipeline_layout_descriptor_t {
  wasi_webgpu_webgpu_list_borrow_gpu_bind_group_layout_t   bind_group_layouts;
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_pipeline_layout_descriptor_t;

typedef struct wasi_webgpu_webgpu_own_gpu_shader_module_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_shader_module_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_shader_module_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_shader_module_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_compilation_message_type_t;

#define WASI_WEBGPU_WEBGPU_GPU_COMPILATION_MESSAGE_TYPE_ERROR 0
#define WASI_WEBGPU_WEBGPU_GPU_COMPILATION_MESSAGE_TYPE_WARNING 1
#define WASI_WEBGPU_WEBGPU_GPU_COMPILATION_MESSAGE_TYPE_INFO 2

typedef struct wasi_webgpu_webgpu_own_gpu_compilation_message_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_compilation_message_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_compilation_message_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_compilation_message_t;

typedef struct wasi_webgpu_webgpu_own_gpu_compilation_info_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_compilation_info_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_compilation_info_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_compilation_info_t;

typedef struct wasi_webgpu_webgpu_own_gpu_pipeline_error_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_pipeline_error_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_pipeline_error_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_pipeline_error_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_pipeline_error_reason_t;

#define WASI_WEBGPU_WEBGPU_GPU_PIPELINE_ERROR_REASON_VALIDATION 0
#define WASI_WEBGPU_WEBGPU_GPU_PIPELINE_ERROR_REASON_INTERNAL 1

typedef struct wasi_webgpu_webgpu_gpu_pipeline_error_init_t {
  wasi_webgpu_webgpu_gpu_pipeline_error_reason_t   reason;
} wasi_webgpu_webgpu_gpu_pipeline_error_init_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_auto_layout_mode_t;

#define WASI_WEBGPU_WEBGPU_GPU_AUTO_LAYOUT_MODE_AUTO 0

typedef struct wasi_webgpu_webgpu_gpu_layout_t {
  uint8_t tag;
  union {
    wasi_webgpu_webgpu_gpu_auto_layout_mode_t     gpu_auto_layout_mode;
    wasi_webgpu_webgpu_borrow_gpu_pipeline_layout_t     gpu_pipeline_layout;
  } val;
} wasi_webgpu_webgpu_gpu_layout_t;

#define WASI_WEBGPU_WEBGPU_GPU_LAYOUT_GPU_AUTO_LAYOUT_MODE 0
#define WASI_WEBGPU_WEBGPU_GPU_LAYOUT_GPU_PIPELINE_LAYOUT 1

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_layout_t val;
} wasi_webgpu_webgpu_option_gpu_layout_t;

typedef struct wasi_webgpu_webgpu_gpu_shader_module_compilation_hint_t {
  imports_string_t   entry_point;
  wasi_webgpu_webgpu_option_gpu_layout_t   layout;
} wasi_webgpu_webgpu_gpu_shader_module_compilation_hint_t;

typedef struct {
  wasi_webgpu_webgpu_gpu_shader_module_compilation_hint_t *ptr;
  size_t len;
} wasi_webgpu_webgpu_list_gpu_shader_module_compilation_hint_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_list_gpu_shader_module_compilation_hint_t val;
} wasi_webgpu_webgpu_option_list_gpu_shader_module_compilation_hint_t;

typedef struct wasi_webgpu_webgpu_gpu_shader_module_descriptor_t {
  imports_string_t   code;
  wasi_webgpu_webgpu_option_list_gpu_shader_module_compilation_hint_t   compilation_hints;
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_shader_module_descriptor_t;

typedef struct wasi_webgpu_webgpu_own_record_gpu_pipeline_constant_value_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_record_gpu_pipeline_constant_value_t;

typedef struct wasi_webgpu_webgpu_borrow_record_gpu_pipeline_constant_value_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_record_gpu_pipeline_constant_value_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_own_record_gpu_pipeline_constant_value_t val;
} wasi_webgpu_webgpu_option_own_record_gpu_pipeline_constant_value_t;

typedef struct wasi_webgpu_webgpu_gpu_programmable_stage_t {
  wasi_webgpu_webgpu_borrow_gpu_shader_module_t   module;
  imports_option_string_t   entry_point;
  wasi_webgpu_webgpu_option_own_record_gpu_pipeline_constant_value_t   constants;
} wasi_webgpu_webgpu_gpu_programmable_stage_t;

typedef double wasi_webgpu_webgpu_gpu_pipeline_constant_value_t;

typedef struct wasi_webgpu_webgpu_own_gpu_compute_pipeline_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_compute_pipeline_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_compute_pipeline_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_compute_pipeline_t;

typedef struct wasi_webgpu_webgpu_gpu_compute_pipeline_descriptor_t {
  wasi_webgpu_webgpu_gpu_programmable_stage_t   compute;
  wasi_webgpu_webgpu_gpu_layout_t   layout;
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_compute_pipeline_descriptor_t;

typedef struct wasi_webgpu_webgpu_own_gpu_render_pipeline_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_render_pipeline_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_render_pipeline_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_render_pipeline_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_primitive_topology_t;

#define WASI_WEBGPU_WEBGPU_GPU_PRIMITIVE_TOPOLOGY_POINT_LIST 0
#define WASI_WEBGPU_WEBGPU_GPU_PRIMITIVE_TOPOLOGY_LINE_LIST 1
#define WASI_WEBGPU_WEBGPU_GPU_PRIMITIVE_TOPOLOGY_LINE_STRIP 2
#define WASI_WEBGPU_WEBGPU_GPU_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST 3
#define WASI_WEBGPU_WEBGPU_GPU_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP 4

typedef uint8_t wasi_webgpu_webgpu_gpu_front_face_t;

#define WASI_WEBGPU_WEBGPU_GPU_FRONT_FACE_CCW 0
#define WASI_WEBGPU_WEBGPU_GPU_FRONT_FACE_CW 1

typedef uint8_t wasi_webgpu_webgpu_gpu_cull_mode_t;

#define WASI_WEBGPU_WEBGPU_GPU_CULL_MODE_NONE 0
#define WASI_WEBGPU_WEBGPU_GPU_CULL_MODE_FRONT 1
#define WASI_WEBGPU_WEBGPU_GPU_CULL_MODE_BACK 2

typedef uint32_t wasi_webgpu_webgpu_gpu_color_write_flags_t;

typedef struct wasi_webgpu_webgpu_own_gpu_color_write_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_color_write_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_color_write_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_color_write_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_blend_factor_t;

#define WASI_WEBGPU_WEBGPU_GPU_BLEND_FACTOR_ZERO 0
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_FACTOR_ONE 1
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_FACTOR_SRC 2
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_FACTOR_ONE_MINUS_SRC 3
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_FACTOR_SRC_ALPHA 4
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA 5
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_FACTOR_DST 6
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_FACTOR_ONE_MINUS_DST 7
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_FACTOR_DST_ALPHA 8
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_FACTOR_ONE_MINUS_DST_ALPHA 9
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_FACTOR_SRC_ALPHA_SATURATED 10
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_FACTOR_CONSTANT 11
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_FACTOR_ONE_MINUS_CONSTANT 12
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_FACTOR_SRC1 13
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_FACTOR_ONE_MINUS_SRC1 14
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_FACTOR_SRC1_ALPHA 15
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA 16

typedef uint8_t wasi_webgpu_webgpu_gpu_blend_operation_t;

#define WASI_WEBGPU_WEBGPU_GPU_BLEND_OPERATION_ADD 0
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_OPERATION_SUBTRACT 1
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_OPERATION_REVERSE_SUBTRACT 2
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_OPERATION_MIN 3
#define WASI_WEBGPU_WEBGPU_GPU_BLEND_OPERATION_MAX 4

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_blend_operation_t val;
} wasi_webgpu_webgpu_option_gpu_blend_operation_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_blend_factor_t val;
} wasi_webgpu_webgpu_option_gpu_blend_factor_t;

typedef struct wasi_webgpu_webgpu_gpu_blend_component_t {
  wasi_webgpu_webgpu_option_gpu_blend_operation_t   operation;
  wasi_webgpu_webgpu_option_gpu_blend_factor_t   src_factor;
  wasi_webgpu_webgpu_option_gpu_blend_factor_t   dst_factor;
} wasi_webgpu_webgpu_gpu_blend_component_t;

typedef struct wasi_webgpu_webgpu_gpu_blend_state_t {
  wasi_webgpu_webgpu_gpu_blend_component_t   color;
  wasi_webgpu_webgpu_gpu_blend_component_t   alpha;
} wasi_webgpu_webgpu_gpu_blend_state_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_blend_state_t val;
} wasi_webgpu_webgpu_option_gpu_blend_state_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_color_write_flags_t val;
} imports_option_gpu_color_write_flags_t;

typedef struct wasi_webgpu_webgpu_gpu_color_target_state_t {
  wasi_webgpu_webgpu_gpu_texture_format_t   format;
  wasi_webgpu_webgpu_option_gpu_blend_state_t   blend;
  imports_option_gpu_color_write_flags_t   write_mask;
} wasi_webgpu_webgpu_gpu_color_target_state_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_color_target_state_t val;
} wasi_webgpu_webgpu_option_gpu_color_target_state_t;

typedef struct {
  wasi_webgpu_webgpu_option_gpu_color_target_state_t *ptr;
  size_t len;
} wasi_webgpu_webgpu_list_option_gpu_color_target_state_t;

typedef struct wasi_webgpu_webgpu_gpu_fragment_state_t {
  wasi_webgpu_webgpu_list_option_gpu_color_target_state_t   targets;
  wasi_webgpu_webgpu_borrow_gpu_shader_module_t   module;
  imports_option_string_t   entry_point;
  wasi_webgpu_webgpu_option_own_record_gpu_pipeline_constant_value_t   constants;
} wasi_webgpu_webgpu_gpu_fragment_state_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_stencil_operation_t;

#define WASI_WEBGPU_WEBGPU_GPU_STENCIL_OPERATION_KEEP 0
#define WASI_WEBGPU_WEBGPU_GPU_STENCIL_OPERATION_ZERO 1
#define WASI_WEBGPU_WEBGPU_GPU_STENCIL_OPERATION_REPLACE 2
#define WASI_WEBGPU_WEBGPU_GPU_STENCIL_OPERATION_INVERT 3
#define WASI_WEBGPU_WEBGPU_GPU_STENCIL_OPERATION_INCREMENT_CLAMP 4
#define WASI_WEBGPU_WEBGPU_GPU_STENCIL_OPERATION_DECREMENT_CLAMP 5
#define WASI_WEBGPU_WEBGPU_GPU_STENCIL_OPERATION_INCREMENT_WRAP 6
#define WASI_WEBGPU_WEBGPU_GPU_STENCIL_OPERATION_DECREMENT_WRAP 7

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_stencil_operation_t val;
} wasi_webgpu_webgpu_option_gpu_stencil_operation_t;

typedef struct wasi_webgpu_webgpu_gpu_stencil_face_state_t {
  wasi_webgpu_webgpu_option_gpu_compare_function_t   compare;
  wasi_webgpu_webgpu_option_gpu_stencil_operation_t   fail_op;
  wasi_webgpu_webgpu_option_gpu_stencil_operation_t   depth_fail_op;
  wasi_webgpu_webgpu_option_gpu_stencil_operation_t   pass_op;
} wasi_webgpu_webgpu_gpu_stencil_face_state_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_index_format_t;

#define WASI_WEBGPU_WEBGPU_GPU_INDEX_FORMAT_UINT16 0
#define WASI_WEBGPU_WEBGPU_GPU_INDEX_FORMAT_UINT32 1

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_primitive_topology_t val;
} wasi_webgpu_webgpu_option_gpu_primitive_topology_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_index_format_t val;
} wasi_webgpu_webgpu_option_gpu_index_format_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_front_face_t val;
} wasi_webgpu_webgpu_option_gpu_front_face_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_cull_mode_t val;
} wasi_webgpu_webgpu_option_gpu_cull_mode_t;

typedef struct wasi_webgpu_webgpu_gpu_primitive_state_t {
  wasi_webgpu_webgpu_option_gpu_primitive_topology_t   topology;
  wasi_webgpu_webgpu_option_gpu_index_format_t   strip_index_format;
  wasi_webgpu_webgpu_option_gpu_front_face_t   front_face;
  wasi_webgpu_webgpu_option_gpu_cull_mode_t   cull_mode;
  imports_option_bool_t   unclipped_depth;
} wasi_webgpu_webgpu_gpu_primitive_state_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_vertex_format_t;

#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_UINT8X2 0
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_UINT8X4 1
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_SINT8X2 2
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_SINT8X4 3
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_UNORM8X2 4
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_UNORM8X4 5
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_SNORM8X2 6
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_SNORM8X4 7
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_UINT16X2 8
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_UINT16X4 9
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_SINT16X2 10
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_SINT16X4 11
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_UNORM16X2 12
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_UNORM16X4 13
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_SNORM16X2 14
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_SNORM16X4 15
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_FLOAT16X2 16
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_FLOAT16X4 17
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_FLOAT32 18
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_FLOAT32X2 19
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_FLOAT32X3 20
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_FLOAT32X4 21
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_UINT32 22
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_UINT32X2 23
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_UINT32X3 24
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_UINT32X4 25
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_SINT32 26
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_SINT32X2 27
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_SINT32X3 28
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_SINT32X4 29
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_FORMAT_UNORM1010102 30

typedef uint8_t wasi_webgpu_webgpu_gpu_vertex_step_mode_t;

#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_STEP_MODE_VERTEX 0
#define WASI_WEBGPU_WEBGPU_GPU_VERTEX_STEP_MODE_INSTANCE 1

typedef struct wasi_webgpu_webgpu_own_gpu_command_buffer_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_command_buffer_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_command_buffer_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_command_buffer_t;

typedef struct wasi_webgpu_webgpu_gpu_command_buffer_descriptor_t {
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_command_buffer_descriptor_t;

typedef struct wasi_webgpu_webgpu_own_gpu_command_encoder_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_command_encoder_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_command_encoder_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_command_encoder_t;

typedef struct wasi_webgpu_webgpu_gpu_command_encoder_descriptor_t {
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_command_encoder_descriptor_t;

typedef struct wasi_webgpu_webgpu_own_gpu_compute_pass_encoder_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_compute_pass_encoder_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_compute_pass_encoder_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_compute_pass_encoder_t;

typedef struct wasi_webgpu_webgpu_own_gpu_render_pass_encoder_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_render_pass_encoder_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_load_op_t;

#define WASI_WEBGPU_WEBGPU_GPU_LOAD_OP_LOAD 0
#define WASI_WEBGPU_WEBGPU_GPU_LOAD_OP_CLEAR 1

typedef uint8_t wasi_webgpu_webgpu_gpu_store_op_t;

#define WASI_WEBGPU_WEBGPU_GPU_STORE_OP_STORE 0
#define WASI_WEBGPU_WEBGPU_GPU_STORE_OP_DISCARD 1

typedef struct wasi_webgpu_webgpu_own_gpu_render_bundle_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_render_bundle_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_render_bundle_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_render_bundle_t;

typedef struct wasi_webgpu_webgpu_gpu_render_bundle_descriptor_t {
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_render_bundle_descriptor_t;

typedef struct wasi_webgpu_webgpu_own_gpu_render_bundle_encoder_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_render_bundle_encoder_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_render_bundle_encoder_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_render_bundle_encoder_t;

typedef struct wasi_webgpu_webgpu_gpu_queue_descriptor_t {
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_queue_descriptor_t;

typedef struct {
  wasi_webgpu_webgpu_gpu_feature_name_t *ptr;
  size_t len;
} wasi_webgpu_webgpu_list_gpu_feature_name_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_list_gpu_feature_name_t val;
} wasi_webgpu_webgpu_option_list_gpu_feature_name_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_own_record_gpu_size64_t val;
} wasi_webgpu_webgpu_option_own_record_gpu_size64_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_queue_descriptor_t val;
} wasi_webgpu_webgpu_option_gpu_queue_descriptor_t;

typedef struct wasi_webgpu_webgpu_gpu_device_descriptor_t {
  wasi_webgpu_webgpu_option_list_gpu_feature_name_t   required_features;
  wasi_webgpu_webgpu_option_own_record_gpu_size64_t   required_limits;
  wasi_webgpu_webgpu_option_gpu_queue_descriptor_t   default_queue;
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_device_descriptor_t;

typedef struct wasi_webgpu_webgpu_own_gpu_queue_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_queue_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_queue_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_queue_t;

typedef struct wasi_webgpu_webgpu_own_gpu_query_set_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_query_set_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_query_set_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_query_set_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_query_type_t;

#define WASI_WEBGPU_WEBGPU_GPU_QUERY_TYPE_OCCLUSION 0
#define WASI_WEBGPU_WEBGPU_GPU_QUERY_TYPE_TIMESTAMP 1

typedef struct wasi_webgpu_webgpu_own_gpu_canvas_context_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_canvas_context_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_canvas_context_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_canvas_context_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_canvas_alpha_mode_t;

#define WASI_WEBGPU_WEBGPU_GPU_CANVAS_ALPHA_MODE_OPAQUE 0
#define WASI_WEBGPU_WEBGPU_GPU_CANVAS_ALPHA_MODE_PREMULTIPLIED 1

typedef uint8_t wasi_webgpu_webgpu_gpu_canvas_tone_mapping_mode_t;

#define WASI_WEBGPU_WEBGPU_GPU_CANVAS_TONE_MAPPING_MODE_STANDARD 0
#define WASI_WEBGPU_WEBGPU_GPU_CANVAS_TONE_MAPPING_MODE_EXTENDED 1

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_canvas_tone_mapping_mode_t val;
} wasi_webgpu_webgpu_option_gpu_canvas_tone_mapping_mode_t;

typedef struct wasi_webgpu_webgpu_gpu_canvas_tone_mapping_t {
  wasi_webgpu_webgpu_option_gpu_canvas_tone_mapping_mode_t   mode;
} wasi_webgpu_webgpu_gpu_canvas_tone_mapping_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_device_lost_reason_t;

#define WASI_WEBGPU_WEBGPU_GPU_DEVICE_LOST_REASON_UNKNOWN 0
#define WASI_WEBGPU_WEBGPU_GPU_DEVICE_LOST_REASON_DESTROYED 1

typedef struct wasi_webgpu_webgpu_own_gpu_device_lost_info_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_device_lost_info_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_device_lost_info_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_device_lost_info_t;

typedef struct wasi_webgpu_webgpu_own_gpu_error_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_error_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_error_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_error_t;

typedef struct wasi_webgpu_webgpu_own_gpu_validation_error_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_validation_error_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_validation_error_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_validation_error_t;

typedef struct wasi_webgpu_webgpu_own_gpu_out_of_memory_error_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_out_of_memory_error_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_out_of_memory_error_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_out_of_memory_error_t;

typedef struct wasi_webgpu_webgpu_own_gpu_internal_error_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_internal_error_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_internal_error_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_internal_error_t;

typedef uint8_t wasi_webgpu_webgpu_gpu_error_filter_t;

#define WASI_WEBGPU_WEBGPU_GPU_ERROR_FILTER_VALIDATION 0
#define WASI_WEBGPU_WEBGPU_GPU_ERROR_FILTER_OUT_OF_MEMORY 1
#define WASI_WEBGPU_WEBGPU_GPU_ERROR_FILTER_INTERNAL 2

typedef struct wasi_webgpu_webgpu_own_gpu_uncaptured_error_event_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_gpu_uncaptured_error_event_t;

typedef struct wasi_webgpu_webgpu_borrow_gpu_uncaptured_error_event_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_gpu_uncaptured_error_event_t;

typedef struct wasi_webgpu_webgpu_gpu_uncaptured_error_event_init_t {
  wasi_webgpu_webgpu_borrow_gpu_error_t   error;
} wasi_webgpu_webgpu_gpu_uncaptured_error_event_init_t;

typedef uint32_t wasi_webgpu_webgpu_gpu_buffer_dynamic_offset_t;

typedef uint32_t wasi_webgpu_webgpu_gpu_stencil_value_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_load_op_t val;
} wasi_webgpu_webgpu_option_gpu_load_op_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_store_op_t val;
} wasi_webgpu_webgpu_option_gpu_store_op_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_stencil_value_t val;
} imports_option_gpu_stencil_value_t;

typedef struct wasi_webgpu_webgpu_gpu_render_pass_depth_stencil_attachment_t {
  wasi_webgpu_webgpu_borrow_gpu_texture_view_t   view;
  imports_option_f32_t   depth_clear_value;
  wasi_webgpu_webgpu_option_gpu_load_op_t   depth_load_op;
  wasi_webgpu_webgpu_option_gpu_store_op_t   depth_store_op;
  imports_option_bool_t   depth_read_only;
  imports_option_gpu_stencil_value_t   stencil_clear_value;
  wasi_webgpu_webgpu_option_gpu_load_op_t   stencil_load_op;
  wasi_webgpu_webgpu_option_gpu_store_op_t   stencil_store_op;
  imports_option_bool_t   stencil_read_only;
} wasi_webgpu_webgpu_gpu_render_pass_depth_stencil_attachment_t;

typedef uint32_t wasi_webgpu_webgpu_gpu_sample_mask_t;

typedef int32_t wasi_webgpu_webgpu_gpu_depth_bias_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_stencil_face_state_t val;
} wasi_webgpu_webgpu_option_gpu_stencil_face_state_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_depth_bias_t val;
} imports_option_gpu_depth_bias_t;

typedef struct wasi_webgpu_webgpu_gpu_depth_stencil_state_t {
  wasi_webgpu_webgpu_gpu_texture_format_t   format;
  imports_option_bool_t   depth_write_enabled;
  wasi_webgpu_webgpu_option_gpu_compare_function_t   depth_compare;
  wasi_webgpu_webgpu_option_gpu_stencil_face_state_t   stencil_front;
  wasi_webgpu_webgpu_option_gpu_stencil_face_state_t   stencil_back;
  imports_option_gpu_stencil_value_t   stencil_read_mask;
  imports_option_gpu_stencil_value_t   stencil_write_mask;
  imports_option_gpu_depth_bias_t   depth_bias;
  imports_option_f32_t   depth_bias_slope_scale;
  imports_option_f32_t   depth_bias_clamp;
} wasi_webgpu_webgpu_gpu_depth_stencil_state_t;

typedef uint64_t wasi_webgpu_webgpu_gpu_size64_t;

typedef struct wasi_webgpu_webgpu_gpu_buffer_descriptor_t {
  wasi_webgpu_webgpu_gpu_size64_t   size;
  wasi_webgpu_webgpu_gpu_buffer_usage_flags_t   usage;
  imports_option_bool_t   mapped_at_creation;
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_buffer_descriptor_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_buffer_binding_type_t val;
} wasi_webgpu_webgpu_option_gpu_buffer_binding_type_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_size64_t val;
} imports_option_gpu_size64_t;

typedef struct wasi_webgpu_webgpu_gpu_buffer_binding_layout_t {
  wasi_webgpu_webgpu_option_gpu_buffer_binding_type_t   type;
  imports_option_bool_t   has_dynamic_offset;
  imports_option_gpu_size64_t   min_binding_size;
} wasi_webgpu_webgpu_gpu_buffer_binding_layout_t;

typedef struct wasi_webgpu_webgpu_gpu_buffer_binding_t {
  wasi_webgpu_webgpu_borrow_gpu_buffer_t   buffer;
  imports_option_gpu_size64_t   offset;
  imports_option_gpu_size64_t   size;
} wasi_webgpu_webgpu_gpu_buffer_binding_t;

typedef struct wasi_webgpu_webgpu_gpu_binding_resource_t {
  uint8_t tag;
  union {
    wasi_webgpu_webgpu_gpu_buffer_binding_t     gpu_buffer_binding;
    wasi_webgpu_webgpu_borrow_gpu_sampler_t     gpu_sampler;
    wasi_webgpu_webgpu_borrow_gpu_texture_view_t     gpu_texture_view;
  } val;
} wasi_webgpu_webgpu_gpu_binding_resource_t;

#define WASI_WEBGPU_WEBGPU_GPU_BINDING_RESOURCE_GPU_BUFFER_BINDING 0
#define WASI_WEBGPU_WEBGPU_GPU_BINDING_RESOURCE_GPU_SAMPLER 1
#define WASI_WEBGPU_WEBGPU_GPU_BINDING_RESOURCE_GPU_TEXTURE_VIEW 2

typedef uint32_t wasi_webgpu_webgpu_gpu_integer_coordinate_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_texture_format_t val;
} wasi_webgpu_webgpu_option_gpu_texture_format_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_texture_usage_flags_t val;
} imports_option_gpu_texture_usage_flags_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_texture_aspect_t val;
} wasi_webgpu_webgpu_option_gpu_texture_aspect_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_integer_coordinate_t val;
} imports_option_gpu_integer_coordinate_t;

typedef struct wasi_webgpu_webgpu_gpu_texture_view_descriptor_t {
  wasi_webgpu_webgpu_option_gpu_texture_format_t   format;
  wasi_webgpu_webgpu_option_gpu_texture_view_dimension_t   dimension;
  imports_option_gpu_texture_usage_flags_t   usage;
  wasi_webgpu_webgpu_option_gpu_texture_aspect_t   aspect;
  imports_option_gpu_integer_coordinate_t   base_mip_level;
  imports_option_gpu_integer_coordinate_t   mip_level_count;
  imports_option_gpu_integer_coordinate_t   base_array_layer;
  imports_option_gpu_integer_coordinate_t   array_layer_count;
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_texture_view_descriptor_t;

typedef uint32_t wasi_webgpu_webgpu_gpu_index32_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_buffer_binding_layout_t val;
} wasi_webgpu_webgpu_option_gpu_buffer_binding_layout_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_sampler_binding_layout_t val;
} wasi_webgpu_webgpu_option_gpu_sampler_binding_layout_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_texture_binding_layout_t val;
} wasi_webgpu_webgpu_option_gpu_texture_binding_layout_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_storage_texture_binding_layout_t val;
} wasi_webgpu_webgpu_option_gpu_storage_texture_binding_layout_t;

typedef struct wasi_webgpu_webgpu_gpu_bind_group_layout_entry_t {
  wasi_webgpu_webgpu_gpu_index32_t   binding;
  wasi_webgpu_webgpu_gpu_shader_stage_flags_t   visibility;
  wasi_webgpu_webgpu_option_gpu_buffer_binding_layout_t   buffer;
  wasi_webgpu_webgpu_option_gpu_sampler_binding_layout_t   sampler;
  wasi_webgpu_webgpu_option_gpu_texture_binding_layout_t   texture;
  wasi_webgpu_webgpu_option_gpu_storage_texture_binding_layout_t   storage_texture;
} wasi_webgpu_webgpu_gpu_bind_group_layout_entry_t;

typedef struct {
  wasi_webgpu_webgpu_gpu_bind_group_layout_entry_t *ptr;
  size_t len;
} wasi_webgpu_webgpu_list_gpu_bind_group_layout_entry_t;

typedef struct wasi_webgpu_webgpu_gpu_bind_group_layout_descriptor_t {
  wasi_webgpu_webgpu_list_gpu_bind_group_layout_entry_t   entries;
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_bind_group_layout_descriptor_t;

typedef struct wasi_webgpu_webgpu_gpu_bind_group_entry_t {
  wasi_webgpu_webgpu_gpu_index32_t   binding;
  wasi_webgpu_webgpu_gpu_binding_resource_t   resource;
} wasi_webgpu_webgpu_gpu_bind_group_entry_t;

typedef struct {
  wasi_webgpu_webgpu_gpu_bind_group_entry_t *ptr;
  size_t len;
} wasi_webgpu_webgpu_list_gpu_bind_group_entry_t;

typedef struct wasi_webgpu_webgpu_gpu_bind_group_descriptor_t {
  wasi_webgpu_webgpu_borrow_gpu_bind_group_layout_t   layout;
  wasi_webgpu_webgpu_list_gpu_bind_group_entry_t   entries;
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_bind_group_descriptor_t;

typedef struct wasi_webgpu_webgpu_gpu_vertex_attribute_t {
  wasi_webgpu_webgpu_gpu_vertex_format_t   format;
  wasi_webgpu_webgpu_gpu_size64_t   offset;
  wasi_webgpu_webgpu_gpu_index32_t   shader_location;
} wasi_webgpu_webgpu_gpu_vertex_attribute_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_vertex_step_mode_t val;
} wasi_webgpu_webgpu_option_gpu_vertex_step_mode_t;

typedef struct {
  wasi_webgpu_webgpu_gpu_vertex_attribute_t *ptr;
  size_t len;
} wasi_webgpu_webgpu_list_gpu_vertex_attribute_t;

typedef struct wasi_webgpu_webgpu_gpu_vertex_buffer_layout_t {
  wasi_webgpu_webgpu_gpu_size64_t   array_stride;
  wasi_webgpu_webgpu_option_gpu_vertex_step_mode_t   step_mode;
  wasi_webgpu_webgpu_list_gpu_vertex_attribute_t   attributes;
} wasi_webgpu_webgpu_gpu_vertex_buffer_layout_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_vertex_buffer_layout_t val;
} wasi_webgpu_webgpu_option_gpu_vertex_buffer_layout_t;

typedef struct {
  wasi_webgpu_webgpu_option_gpu_vertex_buffer_layout_t *ptr;
  size_t len;
} wasi_webgpu_webgpu_list_option_gpu_vertex_buffer_layout_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_list_option_gpu_vertex_buffer_layout_t val;
} wasi_webgpu_webgpu_option_list_option_gpu_vertex_buffer_layout_t;

typedef struct wasi_webgpu_webgpu_gpu_vertex_state_t {
  wasi_webgpu_webgpu_option_list_option_gpu_vertex_buffer_layout_t   buffers;
  wasi_webgpu_webgpu_borrow_gpu_shader_module_t   module;
  imports_option_string_t   entry_point;
  wasi_webgpu_webgpu_option_own_record_gpu_pipeline_constant_value_t   constants;
} wasi_webgpu_webgpu_gpu_vertex_state_t;

typedef uint32_t wasi_webgpu_webgpu_gpu_size32_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_size32_t val;
} imports_option_gpu_size32_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_sample_mask_t val;
} imports_option_gpu_sample_mask_t;

typedef struct wasi_webgpu_webgpu_gpu_multisample_state_t {
  imports_option_gpu_size32_t   count;
  imports_option_gpu_sample_mask_t   mask;
  imports_option_bool_t   alpha_to_coverage_enabled;
} wasi_webgpu_webgpu_gpu_multisample_state_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_primitive_state_t val;
} wasi_webgpu_webgpu_option_gpu_primitive_state_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_depth_stencil_state_t val;
} wasi_webgpu_webgpu_option_gpu_depth_stencil_state_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_multisample_state_t val;
} wasi_webgpu_webgpu_option_gpu_multisample_state_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_fragment_state_t val;
} wasi_webgpu_webgpu_option_gpu_fragment_state_t;

typedef struct wasi_webgpu_webgpu_gpu_render_pipeline_descriptor_t {
  wasi_webgpu_webgpu_gpu_vertex_state_t   vertex;
  wasi_webgpu_webgpu_option_gpu_primitive_state_t   primitive;
  wasi_webgpu_webgpu_option_gpu_depth_stencil_state_t   depth_stencil;
  wasi_webgpu_webgpu_option_gpu_multisample_state_t   multisample;
  wasi_webgpu_webgpu_option_gpu_fragment_state_t   fragment;
  wasi_webgpu_webgpu_gpu_layout_t   layout;
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_render_pipeline_descriptor_t;

typedef struct wasi_webgpu_webgpu_gpu_image_data_layout_t {
  imports_option_gpu_size64_t   offset;
  imports_option_gpu_size32_t   bytes_per_row;
  imports_option_gpu_size32_t   rows_per_image;
} wasi_webgpu_webgpu_gpu_image_data_layout_t;

typedef struct wasi_webgpu_webgpu_gpu_image_copy_buffer_t {
  wasi_webgpu_webgpu_borrow_gpu_buffer_t   buffer;
  imports_option_gpu_size64_t   offset;
  imports_option_gpu_size32_t   bytes_per_row;
  imports_option_gpu_size32_t   rows_per_image;
} wasi_webgpu_webgpu_gpu_image_copy_buffer_t;

typedef struct wasi_webgpu_webgpu_gpu_compute_pass_timestamp_writes_t {
  wasi_webgpu_webgpu_borrow_gpu_query_set_t   query_set;
  imports_option_gpu_size32_t   beginning_of_pass_write_index;
  imports_option_gpu_size32_t   end_of_pass_write_index;
} wasi_webgpu_webgpu_gpu_compute_pass_timestamp_writes_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_compute_pass_timestamp_writes_t val;
} wasi_webgpu_webgpu_option_gpu_compute_pass_timestamp_writes_t;

typedef struct wasi_webgpu_webgpu_gpu_compute_pass_descriptor_t {
  wasi_webgpu_webgpu_option_gpu_compute_pass_timestamp_writes_t   timestamp_writes;
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_compute_pass_descriptor_t;

typedef struct wasi_webgpu_webgpu_gpu_render_pass_timestamp_writes_t {
  wasi_webgpu_webgpu_borrow_gpu_query_set_t   query_set;
  imports_option_gpu_size32_t   beginning_of_pass_write_index;
  imports_option_gpu_size32_t   end_of_pass_write_index;
} wasi_webgpu_webgpu_gpu_render_pass_timestamp_writes_t;

typedef struct {
  wasi_webgpu_webgpu_option_gpu_texture_format_t *ptr;
  size_t len;
} wasi_webgpu_webgpu_list_option_gpu_texture_format_t;

typedef struct wasi_webgpu_webgpu_gpu_render_pass_layout_t {
  wasi_webgpu_webgpu_list_option_gpu_texture_format_t   color_formats;
  wasi_webgpu_webgpu_option_gpu_texture_format_t   depth_stencil_format;
  imports_option_gpu_size32_t   sample_count;
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_render_pass_layout_t;

typedef struct wasi_webgpu_webgpu_gpu_render_bundle_encoder_descriptor_t {
  imports_option_bool_t   depth_read_only;
  imports_option_bool_t   stencil_read_only;
  wasi_webgpu_webgpu_list_option_gpu_texture_format_t   color_formats;
  wasi_webgpu_webgpu_option_gpu_texture_format_t   depth_stencil_format;
  imports_option_gpu_size32_t   sample_count;
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_render_bundle_encoder_descriptor_t;

typedef struct wasi_webgpu_webgpu_gpu_query_set_descriptor_t {
  wasi_webgpu_webgpu_gpu_query_type_t   type;
  wasi_webgpu_webgpu_gpu_size32_t   count;
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_query_set_descriptor_t;

typedef int32_t wasi_webgpu_webgpu_gpu_signed_offset32_t;

typedef uint64_t wasi_webgpu_webgpu_gpu_size64_out_t;

typedef uint32_t wasi_webgpu_webgpu_gpu_integer_coordinate_out_t;

typedef uint32_t wasi_webgpu_webgpu_gpu_size32_out_t;

typedef uint32_t wasi_webgpu_webgpu_gpu_flags_constant_t;

typedef struct wasi_webgpu_webgpu_gpu_color_t {
  double   r;
  double   g;
  double   b;
  double   a;
} wasi_webgpu_webgpu_gpu_color_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_borrow_gpu_texture_view_t val;
} wasi_webgpu_webgpu_option_borrow_gpu_texture_view_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_color_t val;
} wasi_webgpu_webgpu_option_gpu_color_t;

typedef struct wasi_webgpu_webgpu_gpu_render_pass_color_attachment_t {
  wasi_webgpu_webgpu_borrow_gpu_texture_view_t   view;
  imports_option_gpu_integer_coordinate_t   depth_slice;
  wasi_webgpu_webgpu_option_borrow_gpu_texture_view_t   resolve_target;
  wasi_webgpu_webgpu_option_gpu_color_t   clear_value;
  wasi_webgpu_webgpu_gpu_load_op_t   load_op;
  wasi_webgpu_webgpu_gpu_store_op_t   store_op;
} wasi_webgpu_webgpu_gpu_render_pass_color_attachment_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_render_pass_color_attachment_t val;
} wasi_webgpu_webgpu_option_gpu_render_pass_color_attachment_t;

typedef struct {
  wasi_webgpu_webgpu_option_gpu_render_pass_color_attachment_t *ptr;
  size_t len;
} wasi_webgpu_webgpu_list_option_gpu_render_pass_color_attachment_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_render_pass_depth_stencil_attachment_t val;
} wasi_webgpu_webgpu_option_gpu_render_pass_depth_stencil_attachment_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_borrow_gpu_query_set_t val;
} wasi_webgpu_webgpu_option_borrow_gpu_query_set_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_render_pass_timestamp_writes_t val;
} wasi_webgpu_webgpu_option_gpu_render_pass_timestamp_writes_t;

typedef struct wasi_webgpu_webgpu_gpu_render_pass_descriptor_t {
  wasi_webgpu_webgpu_list_option_gpu_render_pass_color_attachment_t   color_attachments;
  wasi_webgpu_webgpu_option_gpu_render_pass_depth_stencil_attachment_t   depth_stencil_attachment;
  wasi_webgpu_webgpu_option_borrow_gpu_query_set_t   occlusion_query_set;
  wasi_webgpu_webgpu_option_gpu_render_pass_timestamp_writes_t   timestamp_writes;
  imports_option_gpu_size64_t   max_draw_count;
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_render_pass_descriptor_t;

typedef struct wasi_webgpu_webgpu_gpu_origin3_d_t {
  imports_option_gpu_integer_coordinate_t   x;
  imports_option_gpu_integer_coordinate_t   y;
  imports_option_gpu_integer_coordinate_t   z;
} wasi_webgpu_webgpu_gpu_origin3_d_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_origin3_d_t val;
} wasi_webgpu_webgpu_option_gpu_origin3_d_t;

typedef struct wasi_webgpu_webgpu_gpu_image_copy_texture_t {
  wasi_webgpu_webgpu_borrow_gpu_texture_t   texture;
  imports_option_gpu_integer_coordinate_t   mip_level;
  wasi_webgpu_webgpu_option_gpu_origin3_d_t   origin;
  wasi_webgpu_webgpu_option_gpu_texture_aspect_t   aspect;
} wasi_webgpu_webgpu_gpu_image_copy_texture_t;

typedef struct wasi_webgpu_webgpu_gpu_extent3_d_t {
  wasi_webgpu_webgpu_gpu_integer_coordinate_t   width;
  imports_option_gpu_integer_coordinate_t   height;
  imports_option_gpu_integer_coordinate_t   depth_or_array_layers;
} wasi_webgpu_webgpu_gpu_extent3_d_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_texture_dimension_t val;
} wasi_webgpu_webgpu_option_gpu_texture_dimension_t;

typedef struct {
  wasi_webgpu_webgpu_gpu_texture_format_t *ptr;
  size_t len;
} wasi_webgpu_webgpu_list_gpu_texture_format_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_list_gpu_texture_format_t val;
} wasi_webgpu_webgpu_option_list_gpu_texture_format_t;

typedef struct wasi_webgpu_webgpu_gpu_texture_descriptor_t {
  wasi_webgpu_webgpu_gpu_extent3_d_t   size;
  imports_option_gpu_integer_coordinate_t   mip_level_count;
  imports_option_gpu_size32_t   sample_count;
  wasi_webgpu_webgpu_option_gpu_texture_dimension_t   dimension;
  wasi_webgpu_webgpu_gpu_texture_format_t   format;
  wasi_webgpu_webgpu_gpu_texture_usage_flags_t   usage;
  wasi_webgpu_webgpu_option_list_gpu_texture_format_t   view_formats;
  imports_option_string_t   label;
} wasi_webgpu_webgpu_gpu_texture_descriptor_t;

typedef uint8_t wasi_webgpu_webgpu_predefined_color_space_t;

#define WASI_WEBGPU_WEBGPU_PREDEFINED_COLOR_SPACE_SRGB 0
#define WASI_WEBGPU_WEBGPU_PREDEFINED_COLOR_SPACE_DISPLAY_P3 1

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_predefined_color_space_t val;
} wasi_webgpu_webgpu_option_predefined_color_space_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_canvas_alpha_mode_t val;
} wasi_webgpu_webgpu_option_gpu_canvas_alpha_mode_t;

typedef struct wasi_webgpu_webgpu_gpu_device_configuration_t {
  wasi_webgpu_webgpu_gpu_texture_format_t   format;
  imports_option_gpu_texture_usage_flags_t   usage;
  wasi_webgpu_webgpu_option_list_gpu_texture_format_t   view_formats;
  wasi_webgpu_webgpu_option_predefined_color_space_t   color_space;
  wasi_webgpu_webgpu_option_gpu_canvas_alpha_mode_t   alpha_mode;
} wasi_webgpu_webgpu_gpu_device_configuration_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_canvas_tone_mapping_t val;
} wasi_webgpu_webgpu_option_gpu_canvas_tone_mapping_t;

typedef struct wasi_webgpu_webgpu_gpu_canvas_configuration_t {
  wasi_webgpu_webgpu_borrow_gpu_device_t   device;
  wasi_webgpu_webgpu_gpu_texture_format_t   format;
  imports_option_gpu_texture_usage_flags_t   usage;
  wasi_webgpu_webgpu_option_list_gpu_texture_format_t   view_formats;
  wasi_webgpu_webgpu_option_predefined_color_space_t   color_space;
  wasi_webgpu_webgpu_option_gpu_canvas_tone_mapping_t   tone_mapping;
  wasi_webgpu_webgpu_option_gpu_canvas_alpha_mode_t   alpha_mode;
} wasi_webgpu_webgpu_gpu_canvas_configuration_t;

typedef struct wasi_webgpu_webgpu_gpu_image_copy_texture_tagged_t {
  wasi_webgpu_webgpu_option_predefined_color_space_t   color_space;
  imports_option_bool_t   premultiplied_alpha;
  wasi_webgpu_webgpu_borrow_gpu_texture_t   texture;
  imports_option_gpu_integer_coordinate_t   mip_level;
  wasi_webgpu_webgpu_option_gpu_origin3_d_t   origin;
  wasi_webgpu_webgpu_option_gpu_texture_aspect_t   aspect;
} wasi_webgpu_webgpu_gpu_image_copy_texture_tagged_t;

typedef struct wasi_webgpu_webgpu_own_non_standard_buffer_t {
  int32_t __handle;
} wasi_webgpu_webgpu_own_non_standard_buffer_t;

typedef struct wasi_webgpu_webgpu_borrow_non_standard_buffer_t {
  int32_t __handle;
} wasi_webgpu_webgpu_borrow_non_standard_buffer_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_request_adapter_options_t val;
} wasi_webgpu_webgpu_option_gpu_request_adapter_options_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_own_gpu_adapter_t val;
} wasi_webgpu_webgpu_option_own_gpu_adapter_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_device_descriptor_t val;
} wasi_webgpu_webgpu_option_gpu_device_descriptor_t;

typedef struct {
  imports_string_t *ptr;
  size_t len;
} imports_list_string_t;

typedef struct {
  wasi_webgpu_webgpu_gpu_size64_t *ptr;
  size_t len;
} imports_list_gpu_size64_t;

typedef struct {
  imports_string_t f0;
  wasi_webgpu_webgpu_gpu_size64_t f1;
} imports_tuple2_string_gpu_size64_t;

typedef wasi_webgpu_graphics_context_borrow_context_t wasi_webgpu_webgpu_borrow_context_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_sampler_descriptor_t val;
} wasi_webgpu_webgpu_option_gpu_sampler_descriptor_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_command_encoder_descriptor_t val;
} wasi_webgpu_webgpu_option_gpu_command_encoder_descriptor_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_own_gpu_error_t val;
} wasi_webgpu_webgpu_option_own_gpu_error_t;

typedef wasi_webgpu_graphics_context_own_abstract_buffer_t wasi_webgpu_webgpu_own_abstract_buffer_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_texture_view_descriptor_t val;
} wasi_webgpu_webgpu_option_gpu_texture_view_descriptor_t;

typedef struct {
  wasi_webgpu_webgpu_own_gpu_compilation_message_t *ptr;
  size_t len;
} wasi_webgpu_webgpu_list_own_gpu_compilation_message_t;

typedef struct {
  wasi_webgpu_webgpu_gpu_pipeline_constant_value_t *ptr;
  size_t len;
} imports_list_gpu_pipeline_constant_value_t;

typedef struct {
  imports_string_t f0;
  wasi_webgpu_webgpu_gpu_pipeline_constant_value_t f1;
} imports_tuple2_string_gpu_pipeline_constant_value_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_compute_pass_descriptor_t val;
} wasi_webgpu_webgpu_option_gpu_compute_pass_descriptor_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_command_buffer_descriptor_t val;
} wasi_webgpu_webgpu_option_gpu_command_buffer_descriptor_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_borrow_gpu_bind_group_t val;
} wasi_webgpu_webgpu_option_borrow_gpu_bind_group_t;

typedef struct {
  wasi_webgpu_webgpu_gpu_buffer_dynamic_offset_t *ptr;
  size_t len;
} imports_list_gpu_buffer_dynamic_offset_t;

typedef struct {
  bool is_some;
  imports_list_gpu_buffer_dynamic_offset_t val;
} imports_option_list_gpu_buffer_dynamic_offset_t;

typedef struct {
  wasi_webgpu_webgpu_borrow_gpu_render_bundle_t *ptr;
  size_t len;
} wasi_webgpu_webgpu_list_borrow_gpu_render_bundle_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_borrow_gpu_buffer_t val;
} wasi_webgpu_webgpu_option_borrow_gpu_buffer_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_signed_offset32_t val;
} imports_option_gpu_signed_offset32_t;

typedef struct {
  bool is_some;
  wasi_webgpu_webgpu_gpu_render_bundle_descriptor_t val;
} wasi_webgpu_webgpu_option_gpu_render_bundle_descriptor_t;

typedef struct {
  wasi_webgpu_webgpu_borrow_gpu_command_buffer_t *ptr;
  size_t len;
} wasi_webgpu_webgpu_list_borrow_gpu_command_buffer_t;

typedef struct {
  uint8_t *ptr;
  size_t len;
} imports_list_u8_t;

typedef struct wasi_io_poll_own_pollable_t {
  int32_t __handle;
} wasi_io_poll_own_pollable_t;

typedef struct wasi_io_poll_borrow_pollable_t {
  int32_t __handle;
} wasi_io_poll_borrow_pollable_t;

typedef struct {
  wasi_io_poll_borrow_pollable_t *ptr;
  size_t len;
} wasi_io_poll_list_borrow_pollable_t;

typedef struct {
  uint32_t *ptr;
  size_t len;
} imports_list_u32_t;

typedef struct {
  bool is_some;
  uint32_t val;
} imports_option_u32_t;

typedef struct wasi_webgpu_surface_create_desc_t {
  imports_option_u32_t   height;
  imports_option_u32_t   width;
} wasi_webgpu_surface_create_desc_t;

typedef struct wasi_webgpu_surface_own_surface_t {
  int32_t __handle;
} wasi_webgpu_surface_own_surface_t;

typedef struct wasi_webgpu_surface_borrow_surface_t {
  int32_t __handle;
} wasi_webgpu_surface_borrow_surface_t;

typedef struct wasi_webgpu_surface_resize_event_t {
  uint32_t   height;
  uint32_t   width;
} wasi_webgpu_surface_resize_event_t;

typedef struct wasi_webgpu_surface_frame_event_t {
  // TODO: This field doesn't mean anything.
  // Can't have empty record. Would like to have a way around this.
  bool   nothing;
} wasi_webgpu_surface_frame_event_t;

typedef struct wasi_webgpu_surface_pointer_event_t {
  double   x;
  double   y;
} wasi_webgpu_surface_pointer_event_t;

// corresponds with https://w3c.github.io/uievents-code/#code-value-tables
// `Unidentified` is not included, use `option<key>` instead.
typedef uint8_t wasi_webgpu_surface_key_t;

#define WASI_WEBGPU_SURFACE_KEY_BACKQUOTE 0
#define WASI_WEBGPU_SURFACE_KEY_BACKSLASH 1
#define WASI_WEBGPU_SURFACE_KEY_BRACKET_LEFT 2
#define WASI_WEBGPU_SURFACE_KEY_BRACKET_RIGHT 3
#define WASI_WEBGPU_SURFACE_KEY_COMMA 4
#define WASI_WEBGPU_SURFACE_KEY_DIGIT0 5
#define WASI_WEBGPU_SURFACE_KEY_DIGIT1 6
#define WASI_WEBGPU_SURFACE_KEY_DIGIT2 7
#define WASI_WEBGPU_SURFACE_KEY_DIGIT3 8
#define WASI_WEBGPU_SURFACE_KEY_DIGIT4 9
#define WASI_WEBGPU_SURFACE_KEY_DIGIT5 10
#define WASI_WEBGPU_SURFACE_KEY_DIGIT6 11
#define WASI_WEBGPU_SURFACE_KEY_DIGIT7 12
#define WASI_WEBGPU_SURFACE_KEY_DIGIT8 13
#define WASI_WEBGPU_SURFACE_KEY_DIGIT9 14
#define WASI_WEBGPU_SURFACE_KEY_EQUAL 15
#define WASI_WEBGPU_SURFACE_KEY_INTL_BACKSLASH 16
#define WASI_WEBGPU_SURFACE_KEY_INTL_RO 17
#define WASI_WEBGPU_SURFACE_KEY_INTL_YEN 18
#define WASI_WEBGPU_SURFACE_KEY_KEY_A 19
#define WASI_WEBGPU_SURFACE_KEY_KEY_B 20
#define WASI_WEBGPU_SURFACE_KEY_KEY_C 21
#define WASI_WEBGPU_SURFACE_KEY_KEY_D 22
#define WASI_WEBGPU_SURFACE_KEY_KEY_E 23
#define WASI_WEBGPU_SURFACE_KEY_KEY_F 24
#define WASI_WEBGPU_SURFACE_KEY_KEY_G 25
#define WASI_WEBGPU_SURFACE_KEY_KEY_H 26
#define WASI_WEBGPU_SURFACE_KEY_KEY_I 27
#define WASI_WEBGPU_SURFACE_KEY_KEY_J 28
#define WASI_WEBGPU_SURFACE_KEY_KEY_K 29
#define WASI_WEBGPU_SURFACE_KEY_KEY_L 30
#define WASI_WEBGPU_SURFACE_KEY_KEY_M 31
#define WASI_WEBGPU_SURFACE_KEY_KEY_N 32
#define WASI_WEBGPU_SURFACE_KEY_KEY_O 33
#define WASI_WEBGPU_SURFACE_KEY_KEY_P 34
#define WASI_WEBGPU_SURFACE_KEY_KEY_Q 35
#define WASI_WEBGPU_SURFACE_KEY_KEY_R 36
#define WASI_WEBGPU_SURFACE_KEY_KEY_S 37
#define WASI_WEBGPU_SURFACE_KEY_KEY_T 38
#define WASI_WEBGPU_SURFACE_KEY_KEY_U 39
#define WASI_WEBGPU_SURFACE_KEY_KEY_V 40
#define WASI_WEBGPU_SURFACE_KEY_KEY_W 41
#define WASI_WEBGPU_SURFACE_KEY_KEY_X 42
#define WASI_WEBGPU_SURFACE_KEY_KEY_Y 43
#define WASI_WEBGPU_SURFACE_KEY_KEY_Z 44
#define WASI_WEBGPU_SURFACE_KEY_MINUS 45
#define WASI_WEBGPU_SURFACE_KEY_PERIOD 46
#define WASI_WEBGPU_SURFACE_KEY_QUOTE 47
#define WASI_WEBGPU_SURFACE_KEY_SEMICOLON 48
#define WASI_WEBGPU_SURFACE_KEY_SLASH 49
#define WASI_WEBGPU_SURFACE_KEY_ALT_LEFT 50
#define WASI_WEBGPU_SURFACE_KEY_ALT_RIGHT 51
#define WASI_WEBGPU_SURFACE_KEY_BACKSPACE 52
#define WASI_WEBGPU_SURFACE_KEY_CAPS_LOCK 53
#define WASI_WEBGPU_SURFACE_KEY_CONTEXT_MENU 54
#define WASI_WEBGPU_SURFACE_KEY_CONTROL_LEFT 55
#define WASI_WEBGPU_SURFACE_KEY_CONTROL_RIGHT 56
#define WASI_WEBGPU_SURFACE_KEY_ENTER 57
#define WASI_WEBGPU_SURFACE_KEY_META_LEFT 58
#define WASI_WEBGPU_SURFACE_KEY_META_RIGHT 59
#define WASI_WEBGPU_SURFACE_KEY_SHIFT_LEFT 60
#define WASI_WEBGPU_SURFACE_KEY_SHIFT_RIGHT 61
#define WASI_WEBGPU_SURFACE_KEY_SPACE 62
#define WASI_WEBGPU_SURFACE_KEY_TAB 63
#define WASI_WEBGPU_SURFACE_KEY_CONVERT 64
#define WASI_WEBGPU_SURFACE_KEY_KANA_MODE 65
#define WASI_WEBGPU_SURFACE_KEY_LANG1 66
#define WASI_WEBGPU_SURFACE_KEY_LANG2 67
#define WASI_WEBGPU_SURFACE_KEY_LANG3 68
#define WASI_WEBGPU_SURFACE_KEY_LANG4 69
#define WASI_WEBGPU_SURFACE_KEY_LANG5 70
#define WASI_WEBGPU_SURFACE_KEY_NON_CONVERT 71
#define WASI_WEBGPU_SURFACE_KEY_DELETE 72
#define WASI_WEBGPU_SURFACE_KEY_END 73
#define WASI_WEBGPU_SURFACE_KEY_HELP 74
#define WASI_WEBGPU_SURFACE_KEY_HOME 75
#define WASI_WEBGPU_SURFACE_KEY_INSERT 76
#define WASI_WEBGPU_SURFACE_KEY_PAGE_DOWN 77
#define WASI_WEBGPU_SURFACE_KEY_PAGE_UP 78
#define WASI_WEBGPU_SURFACE_KEY_ARROW_DOWN 79
#define WASI_WEBGPU_SURFACE_KEY_ARROW_LEFT 80
#define WASI_WEBGPU_SURFACE_KEY_ARROW_RIGHT 81
#define WASI_WEBGPU_SURFACE_KEY_ARROW_UP 82
#define WASI_WEBGPU_SURFACE_KEY_NUM_LOCK 83
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD0 84
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD1 85
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD2 86
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD3 87
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD4 88
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD5 89
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD6 90
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD7 91
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD8 92
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD9 93
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_ADD 94
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_BACKSPACE 95
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_CLEAR 96
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_CLEAR_ENTRY 97
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_COMMA 98
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_DECIMAL 99
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_DIVIDE 100
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_ENTER 101
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_EQUAL 102
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_HASH 103
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_MEMORY_ADD 104
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_MEMORY_CLEAR 105
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_MEMORY_RECALL 106
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_MEMORY_STORE 107
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_MEMORY_SUBTRACT 108
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_MULTIPLY 109
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_PAREN_LEFT 110
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_PAREN_RIGHT 111
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_STAR 112
#define WASI_WEBGPU_SURFACE_KEY_NUMPAD_SUBTRACT 113
#define WASI_WEBGPU_SURFACE_KEY_ESCAPE 114
#define WASI_WEBGPU_SURFACE_KEY_F1 115
#define WASI_WEBGPU_SURFACE_KEY_F2 116
#define WASI_WEBGPU_SURFACE_KEY_F3 117
#define WASI_WEBGPU_SURFACE_KEY_F4 118
#define WASI_WEBGPU_SURFACE_KEY_F5 119
#define WASI_WEBGPU_SURFACE_KEY_F6 120
#define WASI_WEBGPU_SURFACE_KEY_F7 121
#define WASI_WEBGPU_SURFACE_KEY_F8 122
#define WASI_WEBGPU_SURFACE_KEY_F9 123
#define WASI_WEBGPU_SURFACE_KEY_F10 124
#define WASI_WEBGPU_SURFACE_KEY_F11 125
#define WASI_WEBGPU_SURFACE_KEY_F12 126
#define WASI_WEBGPU_SURFACE_KEY_FN 127
#define WASI_WEBGPU_SURFACE_KEY_FN_LOCK 128
#define WASI_WEBGPU_SURFACE_KEY_PRINT_SCREEN 129
#define WASI_WEBGPU_SURFACE_KEY_SCROLL_LOCK 130
#define WASI_WEBGPU_SURFACE_KEY_PAUSE 131
#define WASI_WEBGPU_SURFACE_KEY_BROWSER_BACK 132
#define WASI_WEBGPU_SURFACE_KEY_BROWSER_FAVORITES 133
#define WASI_WEBGPU_SURFACE_KEY_BROWSER_FORWARD 134
#define WASI_WEBGPU_SURFACE_KEY_BROWSER_HOME 135
#define WASI_WEBGPU_SURFACE_KEY_BROWSER_REFRESH 136
#define WASI_WEBGPU_SURFACE_KEY_BROWSER_SEARCH 137
#define WASI_WEBGPU_SURFACE_KEY_BROWSER_STOP 138
#define WASI_WEBGPU_SURFACE_KEY_EJECT 139
#define WASI_WEBGPU_SURFACE_KEY_LAUNCH_APP1 140
#define WASI_WEBGPU_SURFACE_KEY_LAUNCH_APP2 141
#define WASI_WEBGPU_SURFACE_KEY_LAUNCH_MAIL 142
#define WASI_WEBGPU_SURFACE_KEY_MEDIA_PLAY_PAUSE 143
#define WASI_WEBGPU_SURFACE_KEY_MEDIA_SELECT 144
#define WASI_WEBGPU_SURFACE_KEY_MEDIA_STOP 145
#define WASI_WEBGPU_SURFACE_KEY_MEDIA_TRACK_NEXT 146
#define WASI_WEBGPU_SURFACE_KEY_MEDIA_TRACK_PREVIOUS 147
#define WASI_WEBGPU_SURFACE_KEY_POWER 148
#define WASI_WEBGPU_SURFACE_KEY_SLEEP 149
#define WASI_WEBGPU_SURFACE_KEY_AUDIO_VOLUME_DOWN 150
#define WASI_WEBGPU_SURFACE_KEY_AUDIO_VOLUME_MUTE 151
#define WASI_WEBGPU_SURFACE_KEY_AUDIO_VOLUME_UP 152
#define WASI_WEBGPU_SURFACE_KEY_WAKE_UP 153
#define WASI_WEBGPU_SURFACE_KEY_HYPER 154
#define WASI_WEBGPU_SURFACE_KEY_SUPER 155
#define WASI_WEBGPU_SURFACE_KEY_TURBO 156
#define WASI_WEBGPU_SURFACE_KEY_ABORT 157
#define WASI_WEBGPU_SURFACE_KEY_RESUME 158
#define WASI_WEBGPU_SURFACE_KEY_SUSPEND 159
#define WASI_WEBGPU_SURFACE_KEY_AGAIN 160
#define WASI_WEBGPU_SURFACE_KEY_COPY 161
#define WASI_WEBGPU_SURFACE_KEY_CUT 162
#define WASI_WEBGPU_SURFACE_KEY_FIND 163
#define WASI_WEBGPU_SURFACE_KEY_OPEN 164
#define WASI_WEBGPU_SURFACE_KEY_PASTE 165
#define WASI_WEBGPU_SURFACE_KEY_PROPS 166
#define WASI_WEBGPU_SURFACE_KEY_SELECT 167
#define WASI_WEBGPU_SURFACE_KEY_UNDO 168
#define WASI_WEBGPU_SURFACE_KEY_HIRAGANA 169
#define WASI_WEBGPU_SURFACE_KEY_KATAKANA 170

typedef struct {
  bool is_some;
  wasi_webgpu_surface_key_t val;
} wasi_webgpu_surface_option_key_t;

typedef struct wasi_webgpu_surface_key_event_t {
  wasi_webgpu_surface_option_key_t   key;
  imports_option_string_t   text;
  bool   alt_key;
  bool   ctrl_key;
  bool   meta_key;
  bool   shift_key;
} wasi_webgpu_surface_key_event_t;

typedef wasi_webgpu_graphics_context_borrow_context_t wasi_webgpu_surface_borrow_context_t;

typedef wasi_io_poll_own_pollable_t wasi_webgpu_surface_own_pollable_t;

typedef struct {
  bool is_some;
  wasi_webgpu_surface_resize_event_t val;
} wasi_webgpu_surface_option_resize_event_t;

typedef struct {
  bool is_some;
  wasi_webgpu_surface_frame_event_t val;
} wasi_webgpu_surface_option_frame_event_t;

typedef struct {
  bool is_some;
  wasi_webgpu_surface_pointer_event_t val;
} wasi_webgpu_surface_option_pointer_event_t;

typedef struct {
  bool is_some;
  wasi_webgpu_surface_key_event_t val;
} wasi_webgpu_surface_option_key_event_t;

typedef struct wasi_webgpu_frame_buffer_own_device_t {
  int32_t __handle;
} wasi_webgpu_frame_buffer_own_device_t;

typedef struct wasi_webgpu_frame_buffer_borrow_device_t {
  int32_t __handle;
} wasi_webgpu_frame_buffer_borrow_device_t;

typedef struct wasi_webgpu_frame_buffer_own_buffer_t {
  int32_t __handle;
} wasi_webgpu_frame_buffer_own_buffer_t;

typedef struct wasi_webgpu_frame_buffer_borrow_buffer_t {
  int32_t __handle;
} wasi_webgpu_frame_buffer_borrow_buffer_t;

typedef wasi_webgpu_graphics_context_borrow_context_t wasi_webgpu_frame_buffer_borrow_context_t;

typedef wasi_webgpu_graphics_context_own_abstract_buffer_t wasi_webgpu_frame_buffer_own_abstract_buffer_t;

// Imported Functions from `wasi:webgpu/graphics-context`
extern wasi_webgpu_graphics_context_own_context_t wasi_webgpu_graphics_context_constructor_context(void);
extern wasi_webgpu_graphics_context_own_abstract_buffer_t wasi_webgpu_graphics_context_method_context_get_current_buffer(wasi_webgpu_graphics_context_borrow_context_t self);
// TODO: might want to remove this.
extern void wasi_webgpu_graphics_context_method_context_present(wasi_webgpu_graphics_context_borrow_context_t self);

// Imported Functions from `wasi:webgpu/webgpu`
extern wasi_webgpu_webgpu_own_gpu_t wasi_webgpu_webgpu_get_gpu(void);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_texture_dimension1_d(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_texture_dimension2_d(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_texture_dimension3_d(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_texture_array_layers(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_bind_groups(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_bind_groups_plus_vertex_buffers(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_bindings_per_bind_group(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_dynamic_uniform_buffers_per_pipeline_layout(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_dynamic_storage_buffers_per_pipeline_layout(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_sampled_textures_per_shader_stage(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_samplers_per_shader_stage(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_storage_buffers_per_shader_stage(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_storage_textures_per_shader_stage(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_uniform_buffers_per_shader_stage(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint64_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_uniform_buffer_binding_size(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint64_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_storage_buffer_binding_size(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_min_uniform_buffer_offset_alignment(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_min_storage_buffer_offset_alignment(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_vertex_buffers(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint64_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_buffer_size(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_vertex_attributes(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_vertex_buffer_array_stride(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_inter_stage_shader_variables(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_color_attachments(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_color_attachment_bytes_per_sample(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_compute_workgroup_storage_size(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_compute_invocations_per_workgroup(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_compute_workgroup_size_x(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_compute_workgroup_size_y(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_compute_workgroup_size_z(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern uint32_t wasi_webgpu_webgpu_method_gpu_supported_limits_max_compute_workgroups_per_dimension(wasi_webgpu_webgpu_borrow_gpu_supported_limits_t self);
extern bool wasi_webgpu_webgpu_method_gpu_supported_features_has(wasi_webgpu_webgpu_borrow_gpu_supported_features_t self, imports_string_t *value);
extern bool wasi_webgpu_webgpu_method_wgsl_language_features_has(wasi_webgpu_webgpu_borrow_wgsl_language_features_t self, imports_string_t *value);
extern void wasi_webgpu_webgpu_method_gpu_adapter_info_vendor(wasi_webgpu_webgpu_borrow_gpu_adapter_info_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_adapter_info_architecture(wasi_webgpu_webgpu_borrow_gpu_adapter_info_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_adapter_info_device(wasi_webgpu_webgpu_borrow_gpu_adapter_info_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_adapter_info_description(wasi_webgpu_webgpu_borrow_gpu_adapter_info_t self, imports_string_t *ret);
extern bool wasi_webgpu_webgpu_method_gpu_request_adapter(wasi_webgpu_webgpu_borrow_gpu_t self, wasi_webgpu_webgpu_gpu_request_adapter_options_t *maybe_options, wasi_webgpu_webgpu_own_gpu_adapter_t *ret);
extern wasi_webgpu_webgpu_gpu_texture_format_t wasi_webgpu_webgpu_method_gpu_get_preferred_canvas_format(wasi_webgpu_webgpu_borrow_gpu_t self);
extern wasi_webgpu_webgpu_own_wgsl_language_features_t wasi_webgpu_webgpu_method_gpu_wgsl_language_features(wasi_webgpu_webgpu_borrow_gpu_t self);
extern wasi_webgpu_webgpu_own_gpu_supported_features_t wasi_webgpu_webgpu_method_gpu_adapter_features(wasi_webgpu_webgpu_borrow_gpu_adapter_t self);
extern wasi_webgpu_webgpu_own_gpu_supported_limits_t wasi_webgpu_webgpu_method_gpu_adapter_limits(wasi_webgpu_webgpu_borrow_gpu_adapter_t self);
extern wasi_webgpu_webgpu_own_gpu_adapter_info_t wasi_webgpu_webgpu_method_gpu_adapter_info(wasi_webgpu_webgpu_borrow_gpu_adapter_t self);
extern bool wasi_webgpu_webgpu_method_gpu_adapter_is_fallback_adapter(wasi_webgpu_webgpu_borrow_gpu_adapter_t self);
extern wasi_webgpu_webgpu_own_gpu_device_t wasi_webgpu_webgpu_method_gpu_adapter_request_device(wasi_webgpu_webgpu_borrow_gpu_adapter_t self, wasi_webgpu_webgpu_gpu_device_descriptor_t *maybe_descriptor);
extern wasi_webgpu_webgpu_own_record_gpu_size64_t wasi_webgpu_webgpu_constructor_record_gpu_size64(void);
extern void wasi_webgpu_webgpu_method_record_gpu_size64_add(wasi_webgpu_webgpu_borrow_record_gpu_size64_t self, imports_string_t *key, wasi_webgpu_webgpu_gpu_size64_t value);
extern wasi_webgpu_webgpu_gpu_size64_t wasi_webgpu_webgpu_method_record_gpu_size64_get(wasi_webgpu_webgpu_borrow_record_gpu_size64_t self, imports_string_t *key);
extern bool wasi_webgpu_webgpu_method_record_gpu_size64_has(wasi_webgpu_webgpu_borrow_record_gpu_size64_t self, imports_string_t *key);
extern void wasi_webgpu_webgpu_method_record_gpu_size64_remove(wasi_webgpu_webgpu_borrow_record_gpu_size64_t self, imports_string_t *key);
extern void wasi_webgpu_webgpu_method_record_gpu_size64_keys(wasi_webgpu_webgpu_borrow_record_gpu_size64_t self, imports_list_string_t *ret);
extern void wasi_webgpu_webgpu_method_record_gpu_size64_values(wasi_webgpu_webgpu_borrow_record_gpu_size64_t self, imports_list_gpu_size64_t *ret);
extern void wasi_webgpu_webgpu_method_record_gpu_size64_entries(wasi_webgpu_webgpu_borrow_record_gpu_size64_t self, imports_tuple2_string_gpu_size64_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_device_connect_graphics_context(wasi_webgpu_webgpu_borrow_gpu_device_t self, wasi_webgpu_webgpu_borrow_context_t context);
extern wasi_webgpu_webgpu_own_gpu_supported_features_t wasi_webgpu_webgpu_method_gpu_device_features(wasi_webgpu_webgpu_borrow_gpu_device_t self);
extern wasi_webgpu_webgpu_own_gpu_supported_limits_t wasi_webgpu_webgpu_method_gpu_device_limits(wasi_webgpu_webgpu_borrow_gpu_device_t self);
extern wasi_webgpu_webgpu_own_gpu_queue_t wasi_webgpu_webgpu_method_gpu_device_queue(wasi_webgpu_webgpu_borrow_gpu_device_t self);
extern void wasi_webgpu_webgpu_method_gpu_device_destroy(wasi_webgpu_webgpu_borrow_gpu_device_t self);
extern wasi_webgpu_webgpu_own_gpu_buffer_t wasi_webgpu_webgpu_method_gpu_device_create_buffer(wasi_webgpu_webgpu_borrow_gpu_device_t self, wasi_webgpu_webgpu_gpu_buffer_descriptor_t *descriptor);
extern wasi_webgpu_webgpu_own_gpu_texture_t wasi_webgpu_webgpu_method_gpu_device_create_texture(wasi_webgpu_webgpu_borrow_gpu_device_t self, wasi_webgpu_webgpu_gpu_texture_descriptor_t *descriptor);
extern wasi_webgpu_webgpu_own_gpu_sampler_t wasi_webgpu_webgpu_method_gpu_device_create_sampler(wasi_webgpu_webgpu_borrow_gpu_device_t self, wasi_webgpu_webgpu_gpu_sampler_descriptor_t *maybe_descriptor);
extern wasi_webgpu_webgpu_own_gpu_bind_group_layout_t wasi_webgpu_webgpu_method_gpu_device_create_bind_group_layout(wasi_webgpu_webgpu_borrow_gpu_device_t self, wasi_webgpu_webgpu_gpu_bind_group_layout_descriptor_t *descriptor);
extern wasi_webgpu_webgpu_own_gpu_pipeline_layout_t wasi_webgpu_webgpu_method_gpu_device_create_pipeline_layout(wasi_webgpu_webgpu_borrow_gpu_device_t self, wasi_webgpu_webgpu_gpu_pipeline_layout_descriptor_t *descriptor);
extern wasi_webgpu_webgpu_own_gpu_bind_group_t wasi_webgpu_webgpu_method_gpu_device_create_bind_group(wasi_webgpu_webgpu_borrow_gpu_device_t self, wasi_webgpu_webgpu_gpu_bind_group_descriptor_t *descriptor);
extern wasi_webgpu_webgpu_own_gpu_shader_module_t wasi_webgpu_webgpu_method_gpu_device_create_shader_module(wasi_webgpu_webgpu_borrow_gpu_device_t self, wasi_webgpu_webgpu_gpu_shader_module_descriptor_t *descriptor);
extern wasi_webgpu_webgpu_own_gpu_compute_pipeline_t wasi_webgpu_webgpu_method_gpu_device_create_compute_pipeline(wasi_webgpu_webgpu_borrow_gpu_device_t self, wasi_webgpu_webgpu_gpu_compute_pipeline_descriptor_t *descriptor);
extern wasi_webgpu_webgpu_own_gpu_render_pipeline_t wasi_webgpu_webgpu_method_gpu_device_create_render_pipeline(wasi_webgpu_webgpu_borrow_gpu_device_t self, wasi_webgpu_webgpu_gpu_render_pipeline_descriptor_t *descriptor);
extern wasi_webgpu_webgpu_own_gpu_compute_pipeline_t wasi_webgpu_webgpu_method_gpu_device_create_compute_pipeline_async(wasi_webgpu_webgpu_borrow_gpu_device_t self, wasi_webgpu_webgpu_gpu_compute_pipeline_descriptor_t *descriptor);
extern wasi_webgpu_webgpu_own_gpu_render_pipeline_t wasi_webgpu_webgpu_method_gpu_device_create_render_pipeline_async(wasi_webgpu_webgpu_borrow_gpu_device_t self, wasi_webgpu_webgpu_gpu_render_pipeline_descriptor_t *descriptor);
extern wasi_webgpu_webgpu_own_gpu_command_encoder_t wasi_webgpu_webgpu_method_gpu_device_create_command_encoder(wasi_webgpu_webgpu_borrow_gpu_device_t self, wasi_webgpu_webgpu_gpu_command_encoder_descriptor_t *maybe_descriptor);
extern wasi_webgpu_webgpu_own_gpu_render_bundle_encoder_t wasi_webgpu_webgpu_method_gpu_device_create_render_bundle_encoder(wasi_webgpu_webgpu_borrow_gpu_device_t self, wasi_webgpu_webgpu_gpu_render_bundle_encoder_descriptor_t *descriptor);
extern wasi_webgpu_webgpu_own_gpu_query_set_t wasi_webgpu_webgpu_method_gpu_device_create_query_set(wasi_webgpu_webgpu_borrow_gpu_device_t self, wasi_webgpu_webgpu_gpu_query_set_descriptor_t *descriptor);
extern void wasi_webgpu_webgpu_method_gpu_device_label(wasi_webgpu_webgpu_borrow_gpu_device_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_device_set_label(wasi_webgpu_webgpu_borrow_gpu_device_t self, imports_string_t *label);
extern wasi_webgpu_webgpu_own_gpu_device_lost_info_t wasi_webgpu_webgpu_method_gpu_device_lost(wasi_webgpu_webgpu_borrow_gpu_device_t self);
extern void wasi_webgpu_webgpu_method_gpu_device_push_error_scope(wasi_webgpu_webgpu_borrow_gpu_device_t self, wasi_webgpu_webgpu_gpu_error_filter_t filter);
extern bool wasi_webgpu_webgpu_method_gpu_device_pop_error_scope(wasi_webgpu_webgpu_borrow_gpu_device_t self, wasi_webgpu_webgpu_own_gpu_error_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_device_uncaptured_errors(wasi_webgpu_webgpu_borrow_gpu_device_t self);
extern void wasi_webgpu_webgpu_method_gpu_device_configure(wasi_webgpu_webgpu_borrow_gpu_device_t self, wasi_webgpu_webgpu_gpu_device_configuration_t *configuration);
extern wasi_webgpu_webgpu_gpu_size64_out_t wasi_webgpu_webgpu_method_gpu_buffer_size(wasi_webgpu_webgpu_borrow_gpu_buffer_t self);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_method_gpu_buffer_usage(wasi_webgpu_webgpu_borrow_gpu_buffer_t self);
extern wasi_webgpu_webgpu_gpu_buffer_map_state_t wasi_webgpu_webgpu_method_gpu_buffer_map_state(wasi_webgpu_webgpu_borrow_gpu_buffer_t self);
extern void wasi_webgpu_webgpu_method_gpu_buffer_map_async(wasi_webgpu_webgpu_borrow_gpu_buffer_t self, wasi_webgpu_webgpu_gpu_map_mode_flags_t mode, wasi_webgpu_webgpu_gpu_size64_t *maybe_offset, wasi_webgpu_webgpu_gpu_size64_t *maybe_size);
extern wasi_webgpu_webgpu_own_non_standard_buffer_t wasi_webgpu_webgpu_method_gpu_buffer_get_mapped_range(wasi_webgpu_webgpu_borrow_gpu_buffer_t self, wasi_webgpu_webgpu_gpu_size64_t *maybe_offset, wasi_webgpu_webgpu_gpu_size64_t *maybe_size);
extern void wasi_webgpu_webgpu_method_gpu_buffer_unmap(wasi_webgpu_webgpu_borrow_gpu_buffer_t self);
extern void wasi_webgpu_webgpu_method_gpu_buffer_destroy(wasi_webgpu_webgpu_borrow_gpu_buffer_t self);
extern void wasi_webgpu_webgpu_method_gpu_buffer_label(wasi_webgpu_webgpu_borrow_gpu_buffer_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_buffer_set_label(wasi_webgpu_webgpu_borrow_gpu_buffer_t self, imports_string_t *label);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_buffer_usage_map_read(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_buffer_usage_map_write(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_buffer_usage_copy_src(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_buffer_usage_copy_dst(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_buffer_usage_index(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_buffer_usage_vertex(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_buffer_usage_uniform(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_buffer_usage_storage(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_buffer_usage_indirect(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_buffer_usage_query_resolve(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_map_mode_read(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_map_mode_write(void);
extern wasi_webgpu_webgpu_own_gpu_texture_t wasi_webgpu_webgpu_static_gpu_texture_from_graphics_buffer(wasi_webgpu_webgpu_own_abstract_buffer_t buffer);
extern wasi_webgpu_webgpu_own_gpu_texture_view_t wasi_webgpu_webgpu_method_gpu_texture_create_view(wasi_webgpu_webgpu_borrow_gpu_texture_t self, wasi_webgpu_webgpu_gpu_texture_view_descriptor_t *maybe_descriptor);
extern void wasi_webgpu_webgpu_method_gpu_texture_destroy(wasi_webgpu_webgpu_borrow_gpu_texture_t self);
extern wasi_webgpu_webgpu_gpu_integer_coordinate_out_t wasi_webgpu_webgpu_method_gpu_texture_width(wasi_webgpu_webgpu_borrow_gpu_texture_t self);
extern wasi_webgpu_webgpu_gpu_integer_coordinate_out_t wasi_webgpu_webgpu_method_gpu_texture_height(wasi_webgpu_webgpu_borrow_gpu_texture_t self);
extern wasi_webgpu_webgpu_gpu_integer_coordinate_out_t wasi_webgpu_webgpu_method_gpu_texture_depth_or_array_layers(wasi_webgpu_webgpu_borrow_gpu_texture_t self);
extern wasi_webgpu_webgpu_gpu_integer_coordinate_out_t wasi_webgpu_webgpu_method_gpu_texture_mip_level_count(wasi_webgpu_webgpu_borrow_gpu_texture_t self);
extern wasi_webgpu_webgpu_gpu_size32_out_t wasi_webgpu_webgpu_method_gpu_texture_sample_count(wasi_webgpu_webgpu_borrow_gpu_texture_t self);
extern wasi_webgpu_webgpu_gpu_texture_dimension_t wasi_webgpu_webgpu_method_gpu_texture_dimension(wasi_webgpu_webgpu_borrow_gpu_texture_t self);
extern wasi_webgpu_webgpu_gpu_texture_format_t wasi_webgpu_webgpu_method_gpu_texture_format(wasi_webgpu_webgpu_borrow_gpu_texture_t self);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_method_gpu_texture_usage(wasi_webgpu_webgpu_borrow_gpu_texture_t self);
extern void wasi_webgpu_webgpu_method_gpu_texture_label(wasi_webgpu_webgpu_borrow_gpu_texture_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_texture_set_label(wasi_webgpu_webgpu_borrow_gpu_texture_t self, imports_string_t *label);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_texture_usage_copy_src(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_texture_usage_copy_dst(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_texture_usage_texture_binding(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_texture_usage_storage_binding(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_texture_usage_render_attachment(void);
extern void wasi_webgpu_webgpu_method_gpu_texture_view_label(wasi_webgpu_webgpu_borrow_gpu_texture_view_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_texture_view_set_label(wasi_webgpu_webgpu_borrow_gpu_texture_view_t self, imports_string_t *label);
extern void wasi_webgpu_webgpu_method_gpu_sampler_label(wasi_webgpu_webgpu_borrow_gpu_sampler_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_sampler_set_label(wasi_webgpu_webgpu_borrow_gpu_sampler_t self, imports_string_t *label);
extern void wasi_webgpu_webgpu_method_gpu_bind_group_layout_label(wasi_webgpu_webgpu_borrow_gpu_bind_group_layout_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_bind_group_layout_set_label(wasi_webgpu_webgpu_borrow_gpu_bind_group_layout_t self, imports_string_t *label);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_shader_stage_vertex(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_shader_stage_fragment(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_shader_stage_compute(void);
extern void wasi_webgpu_webgpu_method_gpu_bind_group_label(wasi_webgpu_webgpu_borrow_gpu_bind_group_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_bind_group_set_label(wasi_webgpu_webgpu_borrow_gpu_bind_group_t self, imports_string_t *label);
extern void wasi_webgpu_webgpu_method_gpu_pipeline_layout_label(wasi_webgpu_webgpu_borrow_gpu_pipeline_layout_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_pipeline_layout_set_label(wasi_webgpu_webgpu_borrow_gpu_pipeline_layout_t self, imports_string_t *label);
extern wasi_webgpu_webgpu_own_gpu_compilation_info_t wasi_webgpu_webgpu_method_gpu_shader_module_get_compilation_info(wasi_webgpu_webgpu_borrow_gpu_shader_module_t self);
extern void wasi_webgpu_webgpu_method_gpu_shader_module_label(wasi_webgpu_webgpu_borrow_gpu_shader_module_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_shader_module_set_label(wasi_webgpu_webgpu_borrow_gpu_shader_module_t self, imports_string_t *label);
extern void wasi_webgpu_webgpu_method_gpu_compilation_message_message(wasi_webgpu_webgpu_borrow_gpu_compilation_message_t self, imports_string_t *ret);
extern wasi_webgpu_webgpu_gpu_compilation_message_type_t wasi_webgpu_webgpu_method_gpu_compilation_message_type(wasi_webgpu_webgpu_borrow_gpu_compilation_message_t self);
extern uint64_t wasi_webgpu_webgpu_method_gpu_compilation_message_line_num(wasi_webgpu_webgpu_borrow_gpu_compilation_message_t self);
extern uint64_t wasi_webgpu_webgpu_method_gpu_compilation_message_line_pos(wasi_webgpu_webgpu_borrow_gpu_compilation_message_t self);
extern uint64_t wasi_webgpu_webgpu_method_gpu_compilation_message_offset(wasi_webgpu_webgpu_borrow_gpu_compilation_message_t self);
extern uint64_t wasi_webgpu_webgpu_method_gpu_compilation_message_length(wasi_webgpu_webgpu_borrow_gpu_compilation_message_t self);
extern void wasi_webgpu_webgpu_method_gpu_compilation_info_messages(wasi_webgpu_webgpu_borrow_gpu_compilation_info_t self, wasi_webgpu_webgpu_list_own_gpu_compilation_message_t *ret);
extern wasi_webgpu_webgpu_own_gpu_pipeline_error_t wasi_webgpu_webgpu_constructor_gpu_pipeline_error(imports_string_t *maybe_message, wasi_webgpu_webgpu_gpu_pipeline_error_init_t *options);
extern wasi_webgpu_webgpu_gpu_pipeline_error_reason_t wasi_webgpu_webgpu_method_gpu_pipeline_error_reason(wasi_webgpu_webgpu_borrow_gpu_pipeline_error_t self);
extern wasi_webgpu_webgpu_own_record_gpu_pipeline_constant_value_t wasi_webgpu_webgpu_constructor_record_gpu_pipeline_constant_value(void);
extern void wasi_webgpu_webgpu_method_record_gpu_pipeline_constant_value_add(wasi_webgpu_webgpu_borrow_record_gpu_pipeline_constant_value_t self, imports_string_t *key, wasi_webgpu_webgpu_gpu_pipeline_constant_value_t value);
extern wasi_webgpu_webgpu_gpu_pipeline_constant_value_t wasi_webgpu_webgpu_method_record_gpu_pipeline_constant_value_get(wasi_webgpu_webgpu_borrow_record_gpu_pipeline_constant_value_t self, imports_string_t *key);
extern bool wasi_webgpu_webgpu_method_record_gpu_pipeline_constant_value_has(wasi_webgpu_webgpu_borrow_record_gpu_pipeline_constant_value_t self, imports_string_t *key);
extern void wasi_webgpu_webgpu_method_record_gpu_pipeline_constant_value_remove(wasi_webgpu_webgpu_borrow_record_gpu_pipeline_constant_value_t self, imports_string_t *key);
extern void wasi_webgpu_webgpu_method_record_gpu_pipeline_constant_value_keys(wasi_webgpu_webgpu_borrow_record_gpu_pipeline_constant_value_t self, imports_list_string_t *ret);
extern void wasi_webgpu_webgpu_method_record_gpu_pipeline_constant_value_values(wasi_webgpu_webgpu_borrow_record_gpu_pipeline_constant_value_t self, imports_list_gpu_pipeline_constant_value_t *ret);
extern void wasi_webgpu_webgpu_method_record_gpu_pipeline_constant_value_entries(wasi_webgpu_webgpu_borrow_record_gpu_pipeline_constant_value_t self, imports_tuple2_string_gpu_pipeline_constant_value_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_compute_pipeline_label(wasi_webgpu_webgpu_borrow_gpu_compute_pipeline_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_compute_pipeline_set_label(wasi_webgpu_webgpu_borrow_gpu_compute_pipeline_t self, imports_string_t *label);
extern wasi_webgpu_webgpu_own_gpu_bind_group_layout_t wasi_webgpu_webgpu_method_gpu_compute_pipeline_get_bind_group_layout(wasi_webgpu_webgpu_borrow_gpu_compute_pipeline_t self, uint32_t index);
extern void wasi_webgpu_webgpu_method_gpu_render_pipeline_label(wasi_webgpu_webgpu_borrow_gpu_render_pipeline_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_render_pipeline_set_label(wasi_webgpu_webgpu_borrow_gpu_render_pipeline_t self, imports_string_t *label);
extern wasi_webgpu_webgpu_own_gpu_bind_group_layout_t wasi_webgpu_webgpu_method_gpu_render_pipeline_get_bind_group_layout(wasi_webgpu_webgpu_borrow_gpu_render_pipeline_t self, uint32_t index);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_color_write_red(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_color_write_green(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_color_write_blue(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_color_write_alpha(void);
extern wasi_webgpu_webgpu_gpu_flags_constant_t wasi_webgpu_webgpu_static_gpu_color_write_all(void);
extern void wasi_webgpu_webgpu_method_gpu_command_buffer_label(wasi_webgpu_webgpu_borrow_gpu_command_buffer_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_command_buffer_set_label(wasi_webgpu_webgpu_borrow_gpu_command_buffer_t self, imports_string_t *label);
extern wasi_webgpu_webgpu_own_gpu_render_pass_encoder_t wasi_webgpu_webgpu_method_gpu_command_encoder_begin_render_pass(wasi_webgpu_webgpu_borrow_gpu_command_encoder_t self, wasi_webgpu_webgpu_gpu_render_pass_descriptor_t *descriptor);
extern wasi_webgpu_webgpu_own_gpu_compute_pass_encoder_t wasi_webgpu_webgpu_method_gpu_command_encoder_begin_compute_pass(wasi_webgpu_webgpu_borrow_gpu_command_encoder_t self, wasi_webgpu_webgpu_gpu_compute_pass_descriptor_t *maybe_descriptor);
extern void wasi_webgpu_webgpu_method_gpu_command_encoder_copy_buffer_to_buffer(wasi_webgpu_webgpu_borrow_gpu_command_encoder_t self, wasi_webgpu_webgpu_borrow_gpu_buffer_t source, wasi_webgpu_webgpu_gpu_size64_t source_offset, wasi_webgpu_webgpu_borrow_gpu_buffer_t destination, wasi_webgpu_webgpu_gpu_size64_t destination_offset, wasi_webgpu_webgpu_gpu_size64_t size);
extern void wasi_webgpu_webgpu_method_gpu_command_encoder_copy_buffer_to_texture(wasi_webgpu_webgpu_borrow_gpu_command_encoder_t self, wasi_webgpu_webgpu_gpu_image_copy_buffer_t *source, wasi_webgpu_webgpu_gpu_image_copy_texture_t *destination, wasi_webgpu_webgpu_gpu_extent3_d_t *copy_size);
extern void wasi_webgpu_webgpu_method_gpu_command_encoder_copy_texture_to_buffer(wasi_webgpu_webgpu_borrow_gpu_command_encoder_t self, wasi_webgpu_webgpu_gpu_image_copy_texture_t *source, wasi_webgpu_webgpu_gpu_image_copy_buffer_t *destination, wasi_webgpu_webgpu_gpu_extent3_d_t *copy_size);
extern void wasi_webgpu_webgpu_method_gpu_command_encoder_copy_texture_to_texture(wasi_webgpu_webgpu_borrow_gpu_command_encoder_t self, wasi_webgpu_webgpu_gpu_image_copy_texture_t *source, wasi_webgpu_webgpu_gpu_image_copy_texture_t *destination, wasi_webgpu_webgpu_gpu_extent3_d_t *copy_size);
extern void wasi_webgpu_webgpu_method_gpu_command_encoder_clear_buffer(wasi_webgpu_webgpu_borrow_gpu_command_encoder_t self, wasi_webgpu_webgpu_borrow_gpu_buffer_t buffer, wasi_webgpu_webgpu_gpu_size64_t *maybe_offset, wasi_webgpu_webgpu_gpu_size64_t *maybe_size);
extern void wasi_webgpu_webgpu_method_gpu_command_encoder_resolve_query_set(wasi_webgpu_webgpu_borrow_gpu_command_encoder_t self, wasi_webgpu_webgpu_borrow_gpu_query_set_t query_set, wasi_webgpu_webgpu_gpu_size32_t first_query, wasi_webgpu_webgpu_gpu_size32_t query_count, wasi_webgpu_webgpu_borrow_gpu_buffer_t destination, wasi_webgpu_webgpu_gpu_size64_t destination_offset);
extern wasi_webgpu_webgpu_own_gpu_command_buffer_t wasi_webgpu_webgpu_method_gpu_command_encoder_finish(wasi_webgpu_webgpu_borrow_gpu_command_encoder_t self, wasi_webgpu_webgpu_gpu_command_buffer_descriptor_t *maybe_descriptor);
extern void wasi_webgpu_webgpu_method_gpu_command_encoder_label(wasi_webgpu_webgpu_borrow_gpu_command_encoder_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_command_encoder_set_label(wasi_webgpu_webgpu_borrow_gpu_command_encoder_t self, imports_string_t *label);
extern void wasi_webgpu_webgpu_method_gpu_command_encoder_push_debug_group(wasi_webgpu_webgpu_borrow_gpu_command_encoder_t self, imports_string_t *group_label);
extern void wasi_webgpu_webgpu_method_gpu_command_encoder_pop_debug_group(wasi_webgpu_webgpu_borrow_gpu_command_encoder_t self);
extern void wasi_webgpu_webgpu_method_gpu_command_encoder_insert_debug_marker(wasi_webgpu_webgpu_borrow_gpu_command_encoder_t self, imports_string_t *marker_label);
extern void wasi_webgpu_webgpu_method_gpu_compute_pass_encoder_set_pipeline(wasi_webgpu_webgpu_borrow_gpu_compute_pass_encoder_t self, wasi_webgpu_webgpu_borrow_gpu_compute_pipeline_t pipeline);
extern void wasi_webgpu_webgpu_method_gpu_compute_pass_encoder_dispatch_workgroups(wasi_webgpu_webgpu_borrow_gpu_compute_pass_encoder_t self, wasi_webgpu_webgpu_gpu_size32_t workgroup_count_x, wasi_webgpu_webgpu_gpu_size32_t *maybe_workgroup_count_y, wasi_webgpu_webgpu_gpu_size32_t *maybe_workgroup_count_z);
extern void wasi_webgpu_webgpu_method_gpu_compute_pass_encoder_dispatch_workgroups_indirect(wasi_webgpu_webgpu_borrow_gpu_compute_pass_encoder_t self, wasi_webgpu_webgpu_borrow_gpu_buffer_t indirect_buffer, wasi_webgpu_webgpu_gpu_size64_t indirect_offset);
extern void wasi_webgpu_webgpu_method_gpu_compute_pass_encoder_end(wasi_webgpu_webgpu_borrow_gpu_compute_pass_encoder_t self);
extern void wasi_webgpu_webgpu_method_gpu_compute_pass_encoder_label(wasi_webgpu_webgpu_borrow_gpu_compute_pass_encoder_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_compute_pass_encoder_set_label(wasi_webgpu_webgpu_borrow_gpu_compute_pass_encoder_t self, imports_string_t *label);
extern void wasi_webgpu_webgpu_method_gpu_compute_pass_encoder_push_debug_group(wasi_webgpu_webgpu_borrow_gpu_compute_pass_encoder_t self, imports_string_t *group_label);
extern void wasi_webgpu_webgpu_method_gpu_compute_pass_encoder_pop_debug_group(wasi_webgpu_webgpu_borrow_gpu_compute_pass_encoder_t self);
extern void wasi_webgpu_webgpu_method_gpu_compute_pass_encoder_insert_debug_marker(wasi_webgpu_webgpu_borrow_gpu_compute_pass_encoder_t self, imports_string_t *marker_label);
extern void wasi_webgpu_webgpu_method_gpu_compute_pass_encoder_set_bind_group(wasi_webgpu_webgpu_borrow_gpu_compute_pass_encoder_t self, wasi_webgpu_webgpu_gpu_index32_t index, wasi_webgpu_webgpu_borrow_gpu_bind_group_t *maybe_bind_group, imports_list_gpu_buffer_dynamic_offset_t *maybe_dynamic_offsets);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_set_viewport(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self, float x, float y, float width, float height, float min_depth, float max_depth);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_set_scissor_rect(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self, wasi_webgpu_webgpu_gpu_integer_coordinate_t x, wasi_webgpu_webgpu_gpu_integer_coordinate_t y, wasi_webgpu_webgpu_gpu_integer_coordinate_t width, wasi_webgpu_webgpu_gpu_integer_coordinate_t height);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_set_blend_constant(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self, wasi_webgpu_webgpu_gpu_color_t *color);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_set_stencil_reference(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self, wasi_webgpu_webgpu_gpu_stencil_value_t reference);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_begin_occlusion_query(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self, wasi_webgpu_webgpu_gpu_size32_t query_index);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_end_occlusion_query(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_execute_bundles(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self, wasi_webgpu_webgpu_list_borrow_gpu_render_bundle_t *bundles);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_end(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_label(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_set_label(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self, imports_string_t *label);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_push_debug_group(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self, imports_string_t *group_label);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_pop_debug_group(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_insert_debug_marker(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self, imports_string_t *marker_label);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_set_bind_group(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self, wasi_webgpu_webgpu_gpu_index32_t index, wasi_webgpu_webgpu_borrow_gpu_bind_group_t *maybe_bind_group, imports_list_gpu_buffer_dynamic_offset_t *maybe_dynamic_offsets);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_set_pipeline(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self, wasi_webgpu_webgpu_borrow_gpu_render_pipeline_t pipeline);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_set_index_buffer(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self, wasi_webgpu_webgpu_borrow_gpu_buffer_t buffer, wasi_webgpu_webgpu_gpu_index_format_t index_format, wasi_webgpu_webgpu_gpu_size64_t *maybe_offset, wasi_webgpu_webgpu_gpu_size64_t *maybe_size);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_set_vertex_buffer(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self, wasi_webgpu_webgpu_gpu_index32_t slot, wasi_webgpu_webgpu_borrow_gpu_buffer_t *maybe_buffer, wasi_webgpu_webgpu_gpu_size64_t *maybe_offset, wasi_webgpu_webgpu_gpu_size64_t *maybe_size);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_draw(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self, wasi_webgpu_webgpu_gpu_size32_t vertex_count, wasi_webgpu_webgpu_gpu_size32_t *maybe_instance_count, wasi_webgpu_webgpu_gpu_size32_t *maybe_first_vertex, wasi_webgpu_webgpu_gpu_size32_t *maybe_first_instance);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_draw_indexed(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self, wasi_webgpu_webgpu_gpu_size32_t index_count, wasi_webgpu_webgpu_gpu_size32_t *maybe_instance_count, wasi_webgpu_webgpu_gpu_size32_t *maybe_first_index, wasi_webgpu_webgpu_gpu_signed_offset32_t *maybe_base_vertex, wasi_webgpu_webgpu_gpu_size32_t *maybe_first_instance);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_draw_indirect(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self, wasi_webgpu_webgpu_borrow_gpu_buffer_t indirect_buffer, wasi_webgpu_webgpu_gpu_size64_t indirect_offset);
extern void wasi_webgpu_webgpu_method_gpu_render_pass_encoder_draw_indexed_indirect(wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t self, wasi_webgpu_webgpu_borrow_gpu_buffer_t indirect_buffer, wasi_webgpu_webgpu_gpu_size64_t indirect_offset);
extern void wasi_webgpu_webgpu_method_gpu_render_bundle_label(wasi_webgpu_webgpu_borrow_gpu_render_bundle_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_render_bundle_set_label(wasi_webgpu_webgpu_borrow_gpu_render_bundle_t self, imports_string_t *label);
extern wasi_webgpu_webgpu_own_gpu_render_bundle_t wasi_webgpu_webgpu_method_gpu_render_bundle_encoder_finish(wasi_webgpu_webgpu_borrow_gpu_render_bundle_encoder_t self, wasi_webgpu_webgpu_gpu_render_bundle_descriptor_t *maybe_descriptor);
extern void wasi_webgpu_webgpu_method_gpu_render_bundle_encoder_label(wasi_webgpu_webgpu_borrow_gpu_render_bundle_encoder_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_render_bundle_encoder_set_label(wasi_webgpu_webgpu_borrow_gpu_render_bundle_encoder_t self, imports_string_t *label);
extern void wasi_webgpu_webgpu_method_gpu_render_bundle_encoder_push_debug_group(wasi_webgpu_webgpu_borrow_gpu_render_bundle_encoder_t self, imports_string_t *group_label);
extern void wasi_webgpu_webgpu_method_gpu_render_bundle_encoder_pop_debug_group(wasi_webgpu_webgpu_borrow_gpu_render_bundle_encoder_t self);
extern void wasi_webgpu_webgpu_method_gpu_render_bundle_encoder_insert_debug_marker(wasi_webgpu_webgpu_borrow_gpu_render_bundle_encoder_t self, imports_string_t *marker_label);
extern void wasi_webgpu_webgpu_method_gpu_render_bundle_encoder_set_bind_group(wasi_webgpu_webgpu_borrow_gpu_render_bundle_encoder_t self, wasi_webgpu_webgpu_gpu_index32_t index, wasi_webgpu_webgpu_borrow_gpu_bind_group_t *maybe_bind_group, imports_list_gpu_buffer_dynamic_offset_t *maybe_dynamic_offsets);
extern void wasi_webgpu_webgpu_method_gpu_render_bundle_encoder_set_pipeline(wasi_webgpu_webgpu_borrow_gpu_render_bundle_encoder_t self, wasi_webgpu_webgpu_borrow_gpu_render_pipeline_t pipeline);
extern void wasi_webgpu_webgpu_method_gpu_render_bundle_encoder_set_index_buffer(wasi_webgpu_webgpu_borrow_gpu_render_bundle_encoder_t self, wasi_webgpu_webgpu_borrow_gpu_buffer_t buffer, wasi_webgpu_webgpu_gpu_index_format_t index_format, wasi_webgpu_webgpu_gpu_size64_t *maybe_offset, wasi_webgpu_webgpu_gpu_size64_t *maybe_size);
extern void wasi_webgpu_webgpu_method_gpu_render_bundle_encoder_set_vertex_buffer(wasi_webgpu_webgpu_borrow_gpu_render_bundle_encoder_t self, wasi_webgpu_webgpu_gpu_index32_t slot, wasi_webgpu_webgpu_borrow_gpu_buffer_t *maybe_buffer, wasi_webgpu_webgpu_gpu_size64_t *maybe_offset, wasi_webgpu_webgpu_gpu_size64_t *maybe_size);
extern void wasi_webgpu_webgpu_method_gpu_render_bundle_encoder_draw(wasi_webgpu_webgpu_borrow_gpu_render_bundle_encoder_t self, wasi_webgpu_webgpu_gpu_size32_t vertex_count, wasi_webgpu_webgpu_gpu_size32_t *maybe_instance_count, wasi_webgpu_webgpu_gpu_size32_t *maybe_first_vertex, wasi_webgpu_webgpu_gpu_size32_t *maybe_first_instance);
extern void wasi_webgpu_webgpu_method_gpu_render_bundle_encoder_draw_indexed(wasi_webgpu_webgpu_borrow_gpu_render_bundle_encoder_t self, wasi_webgpu_webgpu_gpu_size32_t index_count, wasi_webgpu_webgpu_gpu_size32_t *maybe_instance_count, wasi_webgpu_webgpu_gpu_size32_t *maybe_first_index, wasi_webgpu_webgpu_gpu_signed_offset32_t *maybe_base_vertex, wasi_webgpu_webgpu_gpu_size32_t *maybe_first_instance);
extern void wasi_webgpu_webgpu_method_gpu_render_bundle_encoder_draw_indirect(wasi_webgpu_webgpu_borrow_gpu_render_bundle_encoder_t self, wasi_webgpu_webgpu_borrow_gpu_buffer_t indirect_buffer, wasi_webgpu_webgpu_gpu_size64_t indirect_offset);
extern void wasi_webgpu_webgpu_method_gpu_render_bundle_encoder_draw_indexed_indirect(wasi_webgpu_webgpu_borrow_gpu_render_bundle_encoder_t self, wasi_webgpu_webgpu_borrow_gpu_buffer_t indirect_buffer, wasi_webgpu_webgpu_gpu_size64_t indirect_offset);
extern void wasi_webgpu_webgpu_method_gpu_queue_submit(wasi_webgpu_webgpu_borrow_gpu_queue_t self, wasi_webgpu_webgpu_list_borrow_gpu_command_buffer_t *command_buffers);
extern void wasi_webgpu_webgpu_method_gpu_queue_on_submitted_work_done(wasi_webgpu_webgpu_borrow_gpu_queue_t self);
extern void wasi_webgpu_webgpu_method_gpu_queue_write_buffer(wasi_webgpu_webgpu_borrow_gpu_queue_t self, wasi_webgpu_webgpu_borrow_gpu_buffer_t buffer, wasi_webgpu_webgpu_gpu_size64_t buffer_offset, wasi_webgpu_webgpu_gpu_size64_t *maybe_data_offset, imports_list_u8_t *data, wasi_webgpu_webgpu_gpu_size64_t *maybe_size);
extern void wasi_webgpu_webgpu_method_gpu_queue_write_texture(wasi_webgpu_webgpu_borrow_gpu_queue_t self, wasi_webgpu_webgpu_gpu_image_copy_texture_t *destination, imports_list_u8_t *data, wasi_webgpu_webgpu_gpu_image_data_layout_t *data_layout, wasi_webgpu_webgpu_gpu_extent3_d_t *size);
extern void wasi_webgpu_webgpu_method_gpu_queue_label(wasi_webgpu_webgpu_borrow_gpu_queue_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_queue_set_label(wasi_webgpu_webgpu_borrow_gpu_queue_t self, imports_string_t *label);
extern void wasi_webgpu_webgpu_method_gpu_query_set_destroy(wasi_webgpu_webgpu_borrow_gpu_query_set_t self);
extern wasi_webgpu_webgpu_gpu_query_type_t wasi_webgpu_webgpu_method_gpu_query_set_type(wasi_webgpu_webgpu_borrow_gpu_query_set_t self);
extern wasi_webgpu_webgpu_gpu_size32_out_t wasi_webgpu_webgpu_method_gpu_query_set_count(wasi_webgpu_webgpu_borrow_gpu_query_set_t self);
extern void wasi_webgpu_webgpu_method_gpu_query_set_label(wasi_webgpu_webgpu_borrow_gpu_query_set_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_query_set_set_label(wasi_webgpu_webgpu_borrow_gpu_query_set_t self, imports_string_t *label);
extern void wasi_webgpu_webgpu_method_gpu_canvas_context_configure(wasi_webgpu_webgpu_borrow_gpu_canvas_context_t self, wasi_webgpu_webgpu_gpu_canvas_configuration_t *configuration);
extern void wasi_webgpu_webgpu_method_gpu_canvas_context_unconfigure(wasi_webgpu_webgpu_borrow_gpu_canvas_context_t self);
extern wasi_webgpu_webgpu_own_gpu_texture_t wasi_webgpu_webgpu_method_gpu_canvas_context_get_current_texture(wasi_webgpu_webgpu_borrow_gpu_canvas_context_t self);
extern wasi_webgpu_webgpu_gpu_device_lost_reason_t wasi_webgpu_webgpu_method_gpu_device_lost_info_reason(wasi_webgpu_webgpu_borrow_gpu_device_lost_info_t self);
extern void wasi_webgpu_webgpu_method_gpu_device_lost_info_message(wasi_webgpu_webgpu_borrow_gpu_device_lost_info_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_error_message(wasi_webgpu_webgpu_borrow_gpu_error_t self, imports_string_t *ret);
extern void wasi_webgpu_webgpu_method_gpu_validation_error_message(wasi_webgpu_webgpu_borrow_gpu_validation_error_t self, imports_string_t *ret);
extern wasi_webgpu_webgpu_own_gpu_validation_error_t wasi_webgpu_webgpu_constructor_gpu_validation_error(imports_string_t *message);
extern void wasi_webgpu_webgpu_method_gpu_out_of_memory_error_message(wasi_webgpu_webgpu_borrow_gpu_out_of_memory_error_t self, imports_string_t *ret);
extern wasi_webgpu_webgpu_own_gpu_out_of_memory_error_t wasi_webgpu_webgpu_constructor_gpu_out_of_memory_error(imports_string_t *message);
extern void wasi_webgpu_webgpu_method_gpu_internal_error_message(wasi_webgpu_webgpu_borrow_gpu_internal_error_t self, imports_string_t *ret);
extern wasi_webgpu_webgpu_own_gpu_internal_error_t wasi_webgpu_webgpu_constructor_gpu_internal_error(imports_string_t *message);
extern wasi_webgpu_webgpu_own_gpu_uncaptured_error_event_t wasi_webgpu_webgpu_constructor_gpu_uncaptured_error_event(imports_string_t *type, wasi_webgpu_webgpu_gpu_uncaptured_error_event_init_t *gpu_uncaptured_error_event_init_dict);
extern wasi_webgpu_webgpu_own_gpu_error_t wasi_webgpu_webgpu_method_gpu_uncaptured_error_event_error(wasi_webgpu_webgpu_borrow_gpu_uncaptured_error_event_t self);
extern void wasi_webgpu_webgpu_method_non_standard_buffer_get(wasi_webgpu_webgpu_borrow_non_standard_buffer_t self, imports_list_u8_t *ret);
extern void wasi_webgpu_webgpu_method_non_standard_buffer_set(wasi_webgpu_webgpu_borrow_non_standard_buffer_t self, imports_list_u8_t *val);

// Imported Functions from `wasi:io/poll@0.2.0`
// Return the readiness of a pollable. This function never blocks.
// 
// Returns `true` when the pollable is ready, and `false` otherwise.
extern bool wasi_io_poll_method_pollable_ready(wasi_io_poll_borrow_pollable_t self);
// `block` returns immediately if the pollable is ready, and otherwise
// blocks until ready.
// 
// This function is equivalent to calling `poll.poll` on a list
// containing only this pollable.
extern void wasi_io_poll_method_pollable_block(wasi_io_poll_borrow_pollable_t self);
// Poll for completion on a set of pollables.
// 
// This function takes a list of pollables, which identify I/O sources of
// interest, and waits until one or more of the events is ready for I/O.
// 
// The result `list<u32>` contains one or more indices of handles in the
// argument list that is ready for I/O.
// 
// If the list contains more elements than can be indexed with a `u32`
// value, this function traps.
// 
// A timeout can be implemented by adding a pollable from the
// wasi-clocks API to the list.
// 
// This function does not return a `result`; polling in itself does not
// do any I/O so it doesn't fail. If any of the I/O sources identified by
// the pollables has an error, it is indicated by marking the source as
// being reaedy for I/O.
extern void wasi_io_poll_poll(wasi_io_poll_list_borrow_pollable_t *in, imports_list_u32_t *ret);

// Imported Functions from `wasi:webgpu/surface`
extern wasi_webgpu_surface_own_surface_t wasi_webgpu_surface_constructor_surface(wasi_webgpu_surface_create_desc_t *desc);
extern void wasi_webgpu_surface_method_surface_connect_graphics_context(wasi_webgpu_surface_borrow_surface_t self, wasi_webgpu_surface_borrow_context_t context);
extern uint32_t wasi_webgpu_surface_method_surface_height(wasi_webgpu_surface_borrow_surface_t self);
extern uint32_t wasi_webgpu_surface_method_surface_width(wasi_webgpu_surface_borrow_surface_t self);
extern void wasi_webgpu_surface_method_surface_request_set_size(wasi_webgpu_surface_borrow_surface_t self, uint32_t *maybe_height, uint32_t *maybe_width);
extern wasi_webgpu_surface_own_pollable_t wasi_webgpu_surface_method_surface_subscribe_resize(wasi_webgpu_surface_borrow_surface_t self);
extern bool wasi_webgpu_surface_method_surface_get_resize(wasi_webgpu_surface_borrow_surface_t self, wasi_webgpu_surface_resize_event_t *ret);
extern wasi_webgpu_surface_own_pollable_t wasi_webgpu_surface_method_surface_subscribe_frame(wasi_webgpu_surface_borrow_surface_t self);
extern bool wasi_webgpu_surface_method_surface_get_frame(wasi_webgpu_surface_borrow_surface_t self, wasi_webgpu_surface_frame_event_t *ret);
extern wasi_webgpu_surface_own_pollable_t wasi_webgpu_surface_method_surface_subscribe_pointer_up(wasi_webgpu_surface_borrow_surface_t self);
extern bool wasi_webgpu_surface_method_surface_get_pointer_up(wasi_webgpu_surface_borrow_surface_t self, wasi_webgpu_surface_pointer_event_t *ret);
extern wasi_webgpu_surface_own_pollable_t wasi_webgpu_surface_method_surface_subscribe_pointer_down(wasi_webgpu_surface_borrow_surface_t self);
extern bool wasi_webgpu_surface_method_surface_get_pointer_down(wasi_webgpu_surface_borrow_surface_t self, wasi_webgpu_surface_pointer_event_t *ret);
extern wasi_webgpu_surface_own_pollable_t wasi_webgpu_surface_method_surface_subscribe_pointer_move(wasi_webgpu_surface_borrow_surface_t self);
extern bool wasi_webgpu_surface_method_surface_get_pointer_move(wasi_webgpu_surface_borrow_surface_t self, wasi_webgpu_surface_pointer_event_t *ret);
extern wasi_webgpu_surface_own_pollable_t wasi_webgpu_surface_method_surface_subscribe_key_up(wasi_webgpu_surface_borrow_surface_t self);
extern bool wasi_webgpu_surface_method_surface_get_key_up(wasi_webgpu_surface_borrow_surface_t self, wasi_webgpu_surface_key_event_t *ret);
extern wasi_webgpu_surface_own_pollable_t wasi_webgpu_surface_method_surface_subscribe_key_down(wasi_webgpu_surface_borrow_surface_t self);
extern bool wasi_webgpu_surface_method_surface_get_key_down(wasi_webgpu_surface_borrow_surface_t self, wasi_webgpu_surface_key_event_t *ret);

// Imported Functions from `wasi:webgpu/frame-buffer`
extern wasi_webgpu_frame_buffer_own_device_t wasi_webgpu_frame_buffer_constructor_device(void);
extern void wasi_webgpu_frame_buffer_method_device_connect_graphics_context(wasi_webgpu_frame_buffer_borrow_device_t self, wasi_webgpu_frame_buffer_borrow_context_t context);
extern wasi_webgpu_frame_buffer_own_buffer_t wasi_webgpu_frame_buffer_static_buffer_from_graphics_buffer(wasi_webgpu_frame_buffer_own_abstract_buffer_t buffer);
// TODO: This should be replcated with something that doesn't require a copy.
extern void wasi_webgpu_frame_buffer_method_buffer_get(wasi_webgpu_frame_buffer_borrow_buffer_t self, imports_list_u8_t *ret);
extern void wasi_webgpu_frame_buffer_method_buffer_set(wasi_webgpu_frame_buffer_borrow_buffer_t self, imports_list_u8_t *val);

// Helper Functions

extern void wasi_webgpu_graphics_context_context_drop_own(wasi_webgpu_graphics_context_own_context_t handle);

extern wasi_webgpu_graphics_context_borrow_context_t wasi_webgpu_graphics_context_borrow_context(wasi_webgpu_graphics_context_own_context_t handle);

extern void wasi_webgpu_graphics_context_abstract_buffer_drop_own(wasi_webgpu_graphics_context_own_abstract_buffer_t handle);

extern wasi_webgpu_graphics_context_borrow_abstract_buffer_t wasi_webgpu_graphics_context_borrow_abstract_buffer(wasi_webgpu_graphics_context_own_abstract_buffer_t handle);

extern void wasi_webgpu_webgpu_gpu_supported_limits_drop_own(wasi_webgpu_webgpu_own_gpu_supported_limits_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_supported_limits_t wasi_webgpu_webgpu_borrow_gpu_supported_limits(wasi_webgpu_webgpu_own_gpu_supported_limits_t handle);

extern void wasi_webgpu_webgpu_gpu_supported_features_drop_own(wasi_webgpu_webgpu_own_gpu_supported_features_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_supported_features_t wasi_webgpu_webgpu_borrow_gpu_supported_features(wasi_webgpu_webgpu_own_gpu_supported_features_t handle);

extern void wasi_webgpu_webgpu_wgsl_language_features_drop_own(wasi_webgpu_webgpu_own_wgsl_language_features_t handle);

extern wasi_webgpu_webgpu_borrow_wgsl_language_features_t wasi_webgpu_webgpu_borrow_wgsl_language_features(wasi_webgpu_webgpu_own_wgsl_language_features_t handle);

extern void wasi_webgpu_webgpu_gpu_adapter_info_drop_own(wasi_webgpu_webgpu_own_gpu_adapter_info_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_adapter_info_t wasi_webgpu_webgpu_borrow_gpu_adapter_info(wasi_webgpu_webgpu_own_gpu_adapter_info_t handle);

extern void wasi_webgpu_webgpu_gpu_drop_own(wasi_webgpu_webgpu_own_gpu_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_t wasi_webgpu_webgpu_borrow_gpu(wasi_webgpu_webgpu_own_gpu_t handle);

void wasi_webgpu_webgpu_option_gpu_power_preference_free(wasi_webgpu_webgpu_option_gpu_power_preference_t *ptr);

void imports_option_bool_free(imports_option_bool_t *ptr);

void wasi_webgpu_webgpu_gpu_request_adapter_options_free(wasi_webgpu_webgpu_gpu_request_adapter_options_t *ptr);

extern void wasi_webgpu_webgpu_gpu_adapter_drop_own(wasi_webgpu_webgpu_own_gpu_adapter_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_adapter_t wasi_webgpu_webgpu_borrow_gpu_adapter(wasi_webgpu_webgpu_own_gpu_adapter_t handle);

extern void wasi_webgpu_webgpu_record_gpu_size64_drop_own(wasi_webgpu_webgpu_own_record_gpu_size64_t handle);

extern wasi_webgpu_webgpu_borrow_record_gpu_size64_t wasi_webgpu_webgpu_borrow_record_gpu_size64(wasi_webgpu_webgpu_own_record_gpu_size64_t handle);

extern void wasi_webgpu_webgpu_gpu_device_drop_own(wasi_webgpu_webgpu_own_gpu_device_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_device_t wasi_webgpu_webgpu_borrow_gpu_device(wasi_webgpu_webgpu_own_gpu_device_t handle);

extern void wasi_webgpu_webgpu_gpu_buffer_drop_own(wasi_webgpu_webgpu_own_gpu_buffer_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_buffer_t wasi_webgpu_webgpu_borrow_gpu_buffer(wasi_webgpu_webgpu_own_gpu_buffer_t handle);

extern void wasi_webgpu_webgpu_gpu_buffer_usage_drop_own(wasi_webgpu_webgpu_own_gpu_buffer_usage_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_buffer_usage_t wasi_webgpu_webgpu_borrow_gpu_buffer_usage(wasi_webgpu_webgpu_own_gpu_buffer_usage_t handle);

extern void wasi_webgpu_webgpu_gpu_map_mode_drop_own(wasi_webgpu_webgpu_own_gpu_map_mode_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_map_mode_t wasi_webgpu_webgpu_borrow_gpu_map_mode(wasi_webgpu_webgpu_own_gpu_map_mode_t handle);

extern void wasi_webgpu_webgpu_gpu_texture_drop_own(wasi_webgpu_webgpu_own_gpu_texture_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_texture_t wasi_webgpu_webgpu_borrow_gpu_texture(wasi_webgpu_webgpu_own_gpu_texture_t handle);

extern void wasi_webgpu_webgpu_gpu_texture_usage_drop_own(wasi_webgpu_webgpu_own_gpu_texture_usage_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_texture_usage_t wasi_webgpu_webgpu_borrow_gpu_texture_usage(wasi_webgpu_webgpu_own_gpu_texture_usage_t handle);

extern void wasi_webgpu_webgpu_gpu_texture_view_drop_own(wasi_webgpu_webgpu_own_gpu_texture_view_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_texture_view_t wasi_webgpu_webgpu_borrow_gpu_texture_view(wasi_webgpu_webgpu_own_gpu_texture_view_t handle);

extern void wasi_webgpu_webgpu_gpu_sampler_drop_own(wasi_webgpu_webgpu_own_gpu_sampler_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_sampler_t wasi_webgpu_webgpu_borrow_gpu_sampler(wasi_webgpu_webgpu_own_gpu_sampler_t handle);

void wasi_webgpu_webgpu_option_gpu_address_mode_free(wasi_webgpu_webgpu_option_gpu_address_mode_t *ptr);

void wasi_webgpu_webgpu_option_gpu_filter_mode_free(wasi_webgpu_webgpu_option_gpu_filter_mode_t *ptr);

void wasi_webgpu_webgpu_option_gpu_mipmap_filter_mode_free(wasi_webgpu_webgpu_option_gpu_mipmap_filter_mode_t *ptr);

void imports_option_f32_free(imports_option_f32_t *ptr);

void wasi_webgpu_webgpu_option_gpu_compare_function_free(wasi_webgpu_webgpu_option_gpu_compare_function_t *ptr);

void imports_option_u16_free(imports_option_u16_t *ptr);

void imports_option_string_free(imports_option_string_t *ptr);

void wasi_webgpu_webgpu_gpu_sampler_descriptor_free(wasi_webgpu_webgpu_gpu_sampler_descriptor_t *ptr);

extern void wasi_webgpu_webgpu_gpu_bind_group_layout_drop_own(wasi_webgpu_webgpu_own_gpu_bind_group_layout_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_bind_group_layout_t wasi_webgpu_webgpu_borrow_gpu_bind_group_layout(wasi_webgpu_webgpu_own_gpu_bind_group_layout_t handle);

extern void wasi_webgpu_webgpu_gpu_shader_stage_drop_own(wasi_webgpu_webgpu_own_gpu_shader_stage_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_shader_stage_t wasi_webgpu_webgpu_borrow_gpu_shader_stage(wasi_webgpu_webgpu_own_gpu_shader_stage_t handle);

void wasi_webgpu_webgpu_option_gpu_sampler_binding_type_free(wasi_webgpu_webgpu_option_gpu_sampler_binding_type_t *ptr);

void wasi_webgpu_webgpu_gpu_sampler_binding_layout_free(wasi_webgpu_webgpu_gpu_sampler_binding_layout_t *ptr);

void wasi_webgpu_webgpu_option_gpu_texture_sample_type_free(wasi_webgpu_webgpu_option_gpu_texture_sample_type_t *ptr);

void wasi_webgpu_webgpu_option_gpu_texture_view_dimension_free(wasi_webgpu_webgpu_option_gpu_texture_view_dimension_t *ptr);

void wasi_webgpu_webgpu_gpu_texture_binding_layout_free(wasi_webgpu_webgpu_gpu_texture_binding_layout_t *ptr);

void wasi_webgpu_webgpu_option_gpu_storage_texture_access_free(wasi_webgpu_webgpu_option_gpu_storage_texture_access_t *ptr);

void wasi_webgpu_webgpu_gpu_storage_texture_binding_layout_free(wasi_webgpu_webgpu_gpu_storage_texture_binding_layout_t *ptr);

extern void wasi_webgpu_webgpu_gpu_bind_group_drop_own(wasi_webgpu_webgpu_own_gpu_bind_group_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_bind_group_t wasi_webgpu_webgpu_borrow_gpu_bind_group(wasi_webgpu_webgpu_own_gpu_bind_group_t handle);

extern void wasi_webgpu_webgpu_gpu_pipeline_layout_drop_own(wasi_webgpu_webgpu_own_gpu_pipeline_layout_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_pipeline_layout_t wasi_webgpu_webgpu_borrow_gpu_pipeline_layout(wasi_webgpu_webgpu_own_gpu_pipeline_layout_t handle);

void wasi_webgpu_webgpu_list_borrow_gpu_bind_group_layout_free(wasi_webgpu_webgpu_list_borrow_gpu_bind_group_layout_t *ptr);

void wasi_webgpu_webgpu_gpu_pipeline_layout_descriptor_free(wasi_webgpu_webgpu_gpu_pipeline_layout_descriptor_t *ptr);

extern void wasi_webgpu_webgpu_gpu_shader_module_drop_own(wasi_webgpu_webgpu_own_gpu_shader_module_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_shader_module_t wasi_webgpu_webgpu_borrow_gpu_shader_module(wasi_webgpu_webgpu_own_gpu_shader_module_t handle);

extern void wasi_webgpu_webgpu_gpu_compilation_message_drop_own(wasi_webgpu_webgpu_own_gpu_compilation_message_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_compilation_message_t wasi_webgpu_webgpu_borrow_gpu_compilation_message(wasi_webgpu_webgpu_own_gpu_compilation_message_t handle);

extern void wasi_webgpu_webgpu_gpu_compilation_info_drop_own(wasi_webgpu_webgpu_own_gpu_compilation_info_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_compilation_info_t wasi_webgpu_webgpu_borrow_gpu_compilation_info(wasi_webgpu_webgpu_own_gpu_compilation_info_t handle);

extern void wasi_webgpu_webgpu_gpu_pipeline_error_drop_own(wasi_webgpu_webgpu_own_gpu_pipeline_error_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_pipeline_error_t wasi_webgpu_webgpu_borrow_gpu_pipeline_error(wasi_webgpu_webgpu_own_gpu_pipeline_error_t handle);

void wasi_webgpu_webgpu_gpu_layout_free(wasi_webgpu_webgpu_gpu_layout_t *ptr);

void wasi_webgpu_webgpu_option_gpu_layout_free(wasi_webgpu_webgpu_option_gpu_layout_t *ptr);

void wasi_webgpu_webgpu_gpu_shader_module_compilation_hint_free(wasi_webgpu_webgpu_gpu_shader_module_compilation_hint_t *ptr);

void wasi_webgpu_webgpu_list_gpu_shader_module_compilation_hint_free(wasi_webgpu_webgpu_list_gpu_shader_module_compilation_hint_t *ptr);

void wasi_webgpu_webgpu_option_list_gpu_shader_module_compilation_hint_free(wasi_webgpu_webgpu_option_list_gpu_shader_module_compilation_hint_t *ptr);

void wasi_webgpu_webgpu_gpu_shader_module_descriptor_free(wasi_webgpu_webgpu_gpu_shader_module_descriptor_t *ptr);

extern void wasi_webgpu_webgpu_record_gpu_pipeline_constant_value_drop_own(wasi_webgpu_webgpu_own_record_gpu_pipeline_constant_value_t handle);

extern wasi_webgpu_webgpu_borrow_record_gpu_pipeline_constant_value_t wasi_webgpu_webgpu_borrow_record_gpu_pipeline_constant_value(wasi_webgpu_webgpu_own_record_gpu_pipeline_constant_value_t handle);

void wasi_webgpu_webgpu_option_own_record_gpu_pipeline_constant_value_free(wasi_webgpu_webgpu_option_own_record_gpu_pipeline_constant_value_t *ptr);

void wasi_webgpu_webgpu_gpu_programmable_stage_free(wasi_webgpu_webgpu_gpu_programmable_stage_t *ptr);

extern void wasi_webgpu_webgpu_gpu_compute_pipeline_drop_own(wasi_webgpu_webgpu_own_gpu_compute_pipeline_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_compute_pipeline_t wasi_webgpu_webgpu_borrow_gpu_compute_pipeline(wasi_webgpu_webgpu_own_gpu_compute_pipeline_t handle);

void wasi_webgpu_webgpu_gpu_compute_pipeline_descriptor_free(wasi_webgpu_webgpu_gpu_compute_pipeline_descriptor_t *ptr);

extern void wasi_webgpu_webgpu_gpu_render_pipeline_drop_own(wasi_webgpu_webgpu_own_gpu_render_pipeline_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_render_pipeline_t wasi_webgpu_webgpu_borrow_gpu_render_pipeline(wasi_webgpu_webgpu_own_gpu_render_pipeline_t handle);

extern void wasi_webgpu_webgpu_gpu_color_write_drop_own(wasi_webgpu_webgpu_own_gpu_color_write_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_color_write_t wasi_webgpu_webgpu_borrow_gpu_color_write(wasi_webgpu_webgpu_own_gpu_color_write_t handle);

void wasi_webgpu_webgpu_option_gpu_blend_operation_free(wasi_webgpu_webgpu_option_gpu_blend_operation_t *ptr);

void wasi_webgpu_webgpu_option_gpu_blend_factor_free(wasi_webgpu_webgpu_option_gpu_blend_factor_t *ptr);

void wasi_webgpu_webgpu_gpu_blend_component_free(wasi_webgpu_webgpu_gpu_blend_component_t *ptr);

void wasi_webgpu_webgpu_gpu_blend_state_free(wasi_webgpu_webgpu_gpu_blend_state_t *ptr);

void wasi_webgpu_webgpu_option_gpu_blend_state_free(wasi_webgpu_webgpu_option_gpu_blend_state_t *ptr);

void imports_option_gpu_color_write_flags_free(imports_option_gpu_color_write_flags_t *ptr);

void wasi_webgpu_webgpu_gpu_color_target_state_free(wasi_webgpu_webgpu_gpu_color_target_state_t *ptr);

void wasi_webgpu_webgpu_option_gpu_color_target_state_free(wasi_webgpu_webgpu_option_gpu_color_target_state_t *ptr);

void wasi_webgpu_webgpu_list_option_gpu_color_target_state_free(wasi_webgpu_webgpu_list_option_gpu_color_target_state_t *ptr);

void wasi_webgpu_webgpu_gpu_fragment_state_free(wasi_webgpu_webgpu_gpu_fragment_state_t *ptr);

void wasi_webgpu_webgpu_option_gpu_stencil_operation_free(wasi_webgpu_webgpu_option_gpu_stencil_operation_t *ptr);

void wasi_webgpu_webgpu_gpu_stencil_face_state_free(wasi_webgpu_webgpu_gpu_stencil_face_state_t *ptr);

void wasi_webgpu_webgpu_option_gpu_primitive_topology_free(wasi_webgpu_webgpu_option_gpu_primitive_topology_t *ptr);

void wasi_webgpu_webgpu_option_gpu_index_format_free(wasi_webgpu_webgpu_option_gpu_index_format_t *ptr);

void wasi_webgpu_webgpu_option_gpu_front_face_free(wasi_webgpu_webgpu_option_gpu_front_face_t *ptr);

void wasi_webgpu_webgpu_option_gpu_cull_mode_free(wasi_webgpu_webgpu_option_gpu_cull_mode_t *ptr);

void wasi_webgpu_webgpu_gpu_primitive_state_free(wasi_webgpu_webgpu_gpu_primitive_state_t *ptr);

extern void wasi_webgpu_webgpu_gpu_command_buffer_drop_own(wasi_webgpu_webgpu_own_gpu_command_buffer_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_command_buffer_t wasi_webgpu_webgpu_borrow_gpu_command_buffer(wasi_webgpu_webgpu_own_gpu_command_buffer_t handle);

void wasi_webgpu_webgpu_gpu_command_buffer_descriptor_free(wasi_webgpu_webgpu_gpu_command_buffer_descriptor_t *ptr);

extern void wasi_webgpu_webgpu_gpu_command_encoder_drop_own(wasi_webgpu_webgpu_own_gpu_command_encoder_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_command_encoder_t wasi_webgpu_webgpu_borrow_gpu_command_encoder(wasi_webgpu_webgpu_own_gpu_command_encoder_t handle);

void wasi_webgpu_webgpu_gpu_command_encoder_descriptor_free(wasi_webgpu_webgpu_gpu_command_encoder_descriptor_t *ptr);

extern void wasi_webgpu_webgpu_gpu_compute_pass_encoder_drop_own(wasi_webgpu_webgpu_own_gpu_compute_pass_encoder_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_compute_pass_encoder_t wasi_webgpu_webgpu_borrow_gpu_compute_pass_encoder(wasi_webgpu_webgpu_own_gpu_compute_pass_encoder_t handle);

extern void wasi_webgpu_webgpu_gpu_render_pass_encoder_drop_own(wasi_webgpu_webgpu_own_gpu_render_pass_encoder_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder_t wasi_webgpu_webgpu_borrow_gpu_render_pass_encoder(wasi_webgpu_webgpu_own_gpu_render_pass_encoder_t handle);

extern void wasi_webgpu_webgpu_gpu_render_bundle_drop_own(wasi_webgpu_webgpu_own_gpu_render_bundle_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_render_bundle_t wasi_webgpu_webgpu_borrow_gpu_render_bundle(wasi_webgpu_webgpu_own_gpu_render_bundle_t handle);

void wasi_webgpu_webgpu_gpu_render_bundle_descriptor_free(wasi_webgpu_webgpu_gpu_render_bundle_descriptor_t *ptr);

extern void wasi_webgpu_webgpu_gpu_render_bundle_encoder_drop_own(wasi_webgpu_webgpu_own_gpu_render_bundle_encoder_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_render_bundle_encoder_t wasi_webgpu_webgpu_borrow_gpu_render_bundle_encoder(wasi_webgpu_webgpu_own_gpu_render_bundle_encoder_t handle);

void wasi_webgpu_webgpu_gpu_queue_descriptor_free(wasi_webgpu_webgpu_gpu_queue_descriptor_t *ptr);

void wasi_webgpu_webgpu_list_gpu_feature_name_free(wasi_webgpu_webgpu_list_gpu_feature_name_t *ptr);

void wasi_webgpu_webgpu_option_list_gpu_feature_name_free(wasi_webgpu_webgpu_option_list_gpu_feature_name_t *ptr);

void wasi_webgpu_webgpu_option_own_record_gpu_size64_free(wasi_webgpu_webgpu_option_own_record_gpu_size64_t *ptr);

void wasi_webgpu_webgpu_option_gpu_queue_descriptor_free(wasi_webgpu_webgpu_option_gpu_queue_descriptor_t *ptr);

void wasi_webgpu_webgpu_gpu_device_descriptor_free(wasi_webgpu_webgpu_gpu_device_descriptor_t *ptr);

extern void wasi_webgpu_webgpu_gpu_queue_drop_own(wasi_webgpu_webgpu_own_gpu_queue_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_queue_t wasi_webgpu_webgpu_borrow_gpu_queue(wasi_webgpu_webgpu_own_gpu_queue_t handle);

extern void wasi_webgpu_webgpu_gpu_query_set_drop_own(wasi_webgpu_webgpu_own_gpu_query_set_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_query_set_t wasi_webgpu_webgpu_borrow_gpu_query_set(wasi_webgpu_webgpu_own_gpu_query_set_t handle);

extern void wasi_webgpu_webgpu_gpu_canvas_context_drop_own(wasi_webgpu_webgpu_own_gpu_canvas_context_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_canvas_context_t wasi_webgpu_webgpu_borrow_gpu_canvas_context(wasi_webgpu_webgpu_own_gpu_canvas_context_t handle);

void wasi_webgpu_webgpu_option_gpu_canvas_tone_mapping_mode_free(wasi_webgpu_webgpu_option_gpu_canvas_tone_mapping_mode_t *ptr);

void wasi_webgpu_webgpu_gpu_canvas_tone_mapping_free(wasi_webgpu_webgpu_gpu_canvas_tone_mapping_t *ptr);

extern void wasi_webgpu_webgpu_gpu_device_lost_info_drop_own(wasi_webgpu_webgpu_own_gpu_device_lost_info_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_device_lost_info_t wasi_webgpu_webgpu_borrow_gpu_device_lost_info(wasi_webgpu_webgpu_own_gpu_device_lost_info_t handle);

extern void wasi_webgpu_webgpu_gpu_error_drop_own(wasi_webgpu_webgpu_own_gpu_error_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_error_t wasi_webgpu_webgpu_borrow_gpu_error(wasi_webgpu_webgpu_own_gpu_error_t handle);

extern void wasi_webgpu_webgpu_gpu_validation_error_drop_own(wasi_webgpu_webgpu_own_gpu_validation_error_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_validation_error_t wasi_webgpu_webgpu_borrow_gpu_validation_error(wasi_webgpu_webgpu_own_gpu_validation_error_t handle);

extern void wasi_webgpu_webgpu_gpu_out_of_memory_error_drop_own(wasi_webgpu_webgpu_own_gpu_out_of_memory_error_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_out_of_memory_error_t wasi_webgpu_webgpu_borrow_gpu_out_of_memory_error(wasi_webgpu_webgpu_own_gpu_out_of_memory_error_t handle);

extern void wasi_webgpu_webgpu_gpu_internal_error_drop_own(wasi_webgpu_webgpu_own_gpu_internal_error_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_internal_error_t wasi_webgpu_webgpu_borrow_gpu_internal_error(wasi_webgpu_webgpu_own_gpu_internal_error_t handle);

extern void wasi_webgpu_webgpu_gpu_uncaptured_error_event_drop_own(wasi_webgpu_webgpu_own_gpu_uncaptured_error_event_t handle);

extern wasi_webgpu_webgpu_borrow_gpu_uncaptured_error_event_t wasi_webgpu_webgpu_borrow_gpu_uncaptured_error_event(wasi_webgpu_webgpu_own_gpu_uncaptured_error_event_t handle);

void wasi_webgpu_webgpu_option_gpu_load_op_free(wasi_webgpu_webgpu_option_gpu_load_op_t *ptr);

void wasi_webgpu_webgpu_option_gpu_store_op_free(wasi_webgpu_webgpu_option_gpu_store_op_t *ptr);

void imports_option_gpu_stencil_value_free(imports_option_gpu_stencil_value_t *ptr);

void wasi_webgpu_webgpu_gpu_render_pass_depth_stencil_attachment_free(wasi_webgpu_webgpu_gpu_render_pass_depth_stencil_attachment_t *ptr);

void wasi_webgpu_webgpu_option_gpu_stencil_face_state_free(wasi_webgpu_webgpu_option_gpu_stencil_face_state_t *ptr);

void imports_option_gpu_depth_bias_free(imports_option_gpu_depth_bias_t *ptr);

void wasi_webgpu_webgpu_gpu_depth_stencil_state_free(wasi_webgpu_webgpu_gpu_depth_stencil_state_t *ptr);

void wasi_webgpu_webgpu_gpu_buffer_descriptor_free(wasi_webgpu_webgpu_gpu_buffer_descriptor_t *ptr);

void wasi_webgpu_webgpu_option_gpu_buffer_binding_type_free(wasi_webgpu_webgpu_option_gpu_buffer_binding_type_t *ptr);

void imports_option_gpu_size64_free(imports_option_gpu_size64_t *ptr);

void wasi_webgpu_webgpu_gpu_buffer_binding_layout_free(wasi_webgpu_webgpu_gpu_buffer_binding_layout_t *ptr);

void wasi_webgpu_webgpu_gpu_buffer_binding_free(wasi_webgpu_webgpu_gpu_buffer_binding_t *ptr);

void wasi_webgpu_webgpu_gpu_binding_resource_free(wasi_webgpu_webgpu_gpu_binding_resource_t *ptr);

void wasi_webgpu_webgpu_option_gpu_texture_format_free(wasi_webgpu_webgpu_option_gpu_texture_format_t *ptr);

void imports_option_gpu_texture_usage_flags_free(imports_option_gpu_texture_usage_flags_t *ptr);

void wasi_webgpu_webgpu_option_gpu_texture_aspect_free(wasi_webgpu_webgpu_option_gpu_texture_aspect_t *ptr);

void imports_option_gpu_integer_coordinate_free(imports_option_gpu_integer_coordinate_t *ptr);

void wasi_webgpu_webgpu_gpu_texture_view_descriptor_free(wasi_webgpu_webgpu_gpu_texture_view_descriptor_t *ptr);

void wasi_webgpu_webgpu_option_gpu_buffer_binding_layout_free(wasi_webgpu_webgpu_option_gpu_buffer_binding_layout_t *ptr);

void wasi_webgpu_webgpu_option_gpu_sampler_binding_layout_free(wasi_webgpu_webgpu_option_gpu_sampler_binding_layout_t *ptr);

void wasi_webgpu_webgpu_option_gpu_texture_binding_layout_free(wasi_webgpu_webgpu_option_gpu_texture_binding_layout_t *ptr);

void wasi_webgpu_webgpu_option_gpu_storage_texture_binding_layout_free(wasi_webgpu_webgpu_option_gpu_storage_texture_binding_layout_t *ptr);

void wasi_webgpu_webgpu_gpu_bind_group_layout_entry_free(wasi_webgpu_webgpu_gpu_bind_group_layout_entry_t *ptr);

void wasi_webgpu_webgpu_list_gpu_bind_group_layout_entry_free(wasi_webgpu_webgpu_list_gpu_bind_group_layout_entry_t *ptr);

void wasi_webgpu_webgpu_gpu_bind_group_layout_descriptor_free(wasi_webgpu_webgpu_gpu_bind_group_layout_descriptor_t *ptr);

void wasi_webgpu_webgpu_gpu_bind_group_entry_free(wasi_webgpu_webgpu_gpu_bind_group_entry_t *ptr);

void wasi_webgpu_webgpu_list_gpu_bind_group_entry_free(wasi_webgpu_webgpu_list_gpu_bind_group_entry_t *ptr);

void wasi_webgpu_webgpu_gpu_bind_group_descriptor_free(wasi_webgpu_webgpu_gpu_bind_group_descriptor_t *ptr);

void wasi_webgpu_webgpu_option_gpu_vertex_step_mode_free(wasi_webgpu_webgpu_option_gpu_vertex_step_mode_t *ptr);

void wasi_webgpu_webgpu_list_gpu_vertex_attribute_free(wasi_webgpu_webgpu_list_gpu_vertex_attribute_t *ptr);

void wasi_webgpu_webgpu_gpu_vertex_buffer_layout_free(wasi_webgpu_webgpu_gpu_vertex_buffer_layout_t *ptr);

void wasi_webgpu_webgpu_option_gpu_vertex_buffer_layout_free(wasi_webgpu_webgpu_option_gpu_vertex_buffer_layout_t *ptr);

void wasi_webgpu_webgpu_list_option_gpu_vertex_buffer_layout_free(wasi_webgpu_webgpu_list_option_gpu_vertex_buffer_layout_t *ptr);

void wasi_webgpu_webgpu_option_list_option_gpu_vertex_buffer_layout_free(wasi_webgpu_webgpu_option_list_option_gpu_vertex_buffer_layout_t *ptr);

void wasi_webgpu_webgpu_gpu_vertex_state_free(wasi_webgpu_webgpu_gpu_vertex_state_t *ptr);

void imports_option_gpu_size32_free(imports_option_gpu_size32_t *ptr);

void imports_option_gpu_sample_mask_free(imports_option_gpu_sample_mask_t *ptr);

void wasi_webgpu_webgpu_gpu_multisample_state_free(wasi_webgpu_webgpu_gpu_multisample_state_t *ptr);

void wasi_webgpu_webgpu_option_gpu_primitive_state_free(wasi_webgpu_webgpu_option_gpu_primitive_state_t *ptr);

void wasi_webgpu_webgpu_option_gpu_depth_stencil_state_free(wasi_webgpu_webgpu_option_gpu_depth_stencil_state_t *ptr);

void wasi_webgpu_webgpu_option_gpu_multisample_state_free(wasi_webgpu_webgpu_option_gpu_multisample_state_t *ptr);

void wasi_webgpu_webgpu_option_gpu_fragment_state_free(wasi_webgpu_webgpu_option_gpu_fragment_state_t *ptr);

void wasi_webgpu_webgpu_gpu_render_pipeline_descriptor_free(wasi_webgpu_webgpu_gpu_render_pipeline_descriptor_t *ptr);

void wasi_webgpu_webgpu_gpu_image_data_layout_free(wasi_webgpu_webgpu_gpu_image_data_layout_t *ptr);

void wasi_webgpu_webgpu_gpu_image_copy_buffer_free(wasi_webgpu_webgpu_gpu_image_copy_buffer_t *ptr);

void wasi_webgpu_webgpu_gpu_compute_pass_timestamp_writes_free(wasi_webgpu_webgpu_gpu_compute_pass_timestamp_writes_t *ptr);

void wasi_webgpu_webgpu_option_gpu_compute_pass_timestamp_writes_free(wasi_webgpu_webgpu_option_gpu_compute_pass_timestamp_writes_t *ptr);

void wasi_webgpu_webgpu_gpu_compute_pass_descriptor_free(wasi_webgpu_webgpu_gpu_compute_pass_descriptor_t *ptr);

void wasi_webgpu_webgpu_gpu_render_pass_timestamp_writes_free(wasi_webgpu_webgpu_gpu_render_pass_timestamp_writes_t *ptr);

void wasi_webgpu_webgpu_list_option_gpu_texture_format_free(wasi_webgpu_webgpu_list_option_gpu_texture_format_t *ptr);

void wasi_webgpu_webgpu_gpu_render_pass_layout_free(wasi_webgpu_webgpu_gpu_render_pass_layout_t *ptr);

void wasi_webgpu_webgpu_gpu_render_bundle_encoder_descriptor_free(wasi_webgpu_webgpu_gpu_render_bundle_encoder_descriptor_t *ptr);

void wasi_webgpu_webgpu_gpu_query_set_descriptor_free(wasi_webgpu_webgpu_gpu_query_set_descriptor_t *ptr);

void wasi_webgpu_webgpu_option_borrow_gpu_texture_view_free(wasi_webgpu_webgpu_option_borrow_gpu_texture_view_t *ptr);

void wasi_webgpu_webgpu_option_gpu_color_free(wasi_webgpu_webgpu_option_gpu_color_t *ptr);

void wasi_webgpu_webgpu_gpu_render_pass_color_attachment_free(wasi_webgpu_webgpu_gpu_render_pass_color_attachment_t *ptr);

void wasi_webgpu_webgpu_option_gpu_render_pass_color_attachment_free(wasi_webgpu_webgpu_option_gpu_render_pass_color_attachment_t *ptr);

void wasi_webgpu_webgpu_list_option_gpu_render_pass_color_attachment_free(wasi_webgpu_webgpu_list_option_gpu_render_pass_color_attachment_t *ptr);

void wasi_webgpu_webgpu_option_gpu_render_pass_depth_stencil_attachment_free(wasi_webgpu_webgpu_option_gpu_render_pass_depth_stencil_attachment_t *ptr);

void wasi_webgpu_webgpu_option_borrow_gpu_query_set_free(wasi_webgpu_webgpu_option_borrow_gpu_query_set_t *ptr);

void wasi_webgpu_webgpu_option_gpu_render_pass_timestamp_writes_free(wasi_webgpu_webgpu_option_gpu_render_pass_timestamp_writes_t *ptr);

void wasi_webgpu_webgpu_gpu_render_pass_descriptor_free(wasi_webgpu_webgpu_gpu_render_pass_descriptor_t *ptr);

void wasi_webgpu_webgpu_gpu_origin3_d_free(wasi_webgpu_webgpu_gpu_origin3_d_t *ptr);

void wasi_webgpu_webgpu_option_gpu_origin3_d_free(wasi_webgpu_webgpu_option_gpu_origin3_d_t *ptr);

void wasi_webgpu_webgpu_gpu_image_copy_texture_free(wasi_webgpu_webgpu_gpu_image_copy_texture_t *ptr);

void wasi_webgpu_webgpu_gpu_extent3_d_free(wasi_webgpu_webgpu_gpu_extent3_d_t *ptr);

void wasi_webgpu_webgpu_option_gpu_texture_dimension_free(wasi_webgpu_webgpu_option_gpu_texture_dimension_t *ptr);

void wasi_webgpu_webgpu_list_gpu_texture_format_free(wasi_webgpu_webgpu_list_gpu_texture_format_t *ptr);

void wasi_webgpu_webgpu_option_list_gpu_texture_format_free(wasi_webgpu_webgpu_option_list_gpu_texture_format_t *ptr);

void wasi_webgpu_webgpu_gpu_texture_descriptor_free(wasi_webgpu_webgpu_gpu_texture_descriptor_t *ptr);

void wasi_webgpu_webgpu_option_predefined_color_space_free(wasi_webgpu_webgpu_option_predefined_color_space_t *ptr);

void wasi_webgpu_webgpu_option_gpu_canvas_alpha_mode_free(wasi_webgpu_webgpu_option_gpu_canvas_alpha_mode_t *ptr);

void wasi_webgpu_webgpu_gpu_device_configuration_free(wasi_webgpu_webgpu_gpu_device_configuration_t *ptr);

void wasi_webgpu_webgpu_option_gpu_canvas_tone_mapping_free(wasi_webgpu_webgpu_option_gpu_canvas_tone_mapping_t *ptr);

void wasi_webgpu_webgpu_gpu_canvas_configuration_free(wasi_webgpu_webgpu_gpu_canvas_configuration_t *ptr);

void wasi_webgpu_webgpu_gpu_image_copy_texture_tagged_free(wasi_webgpu_webgpu_gpu_image_copy_texture_tagged_t *ptr);

extern void wasi_webgpu_webgpu_non_standard_buffer_drop_own(wasi_webgpu_webgpu_own_non_standard_buffer_t handle);

extern wasi_webgpu_webgpu_borrow_non_standard_buffer_t wasi_webgpu_webgpu_borrow_non_standard_buffer(wasi_webgpu_webgpu_own_non_standard_buffer_t handle);

void wasi_webgpu_webgpu_option_gpu_request_adapter_options_free(wasi_webgpu_webgpu_option_gpu_request_adapter_options_t *ptr);

void wasi_webgpu_webgpu_option_own_gpu_adapter_free(wasi_webgpu_webgpu_option_own_gpu_adapter_t *ptr);

void wasi_webgpu_webgpu_option_gpu_device_descriptor_free(wasi_webgpu_webgpu_option_gpu_device_descriptor_t *ptr);

void imports_list_string_free(imports_list_string_t *ptr);

void imports_list_gpu_size64_free(imports_list_gpu_size64_t *ptr);

void imports_tuple2_string_gpu_size64_free(imports_tuple2_string_gpu_size64_t *ptr);

void wasi_webgpu_webgpu_option_gpu_sampler_descriptor_free(wasi_webgpu_webgpu_option_gpu_sampler_descriptor_t *ptr);

void wasi_webgpu_webgpu_option_gpu_command_encoder_descriptor_free(wasi_webgpu_webgpu_option_gpu_command_encoder_descriptor_t *ptr);

void wasi_webgpu_webgpu_option_own_gpu_error_free(wasi_webgpu_webgpu_option_own_gpu_error_t *ptr);

void wasi_webgpu_webgpu_option_gpu_texture_view_descriptor_free(wasi_webgpu_webgpu_option_gpu_texture_view_descriptor_t *ptr);

void wasi_webgpu_webgpu_list_own_gpu_compilation_message_free(wasi_webgpu_webgpu_list_own_gpu_compilation_message_t *ptr);

void imports_list_gpu_pipeline_constant_value_free(imports_list_gpu_pipeline_constant_value_t *ptr);

void imports_tuple2_string_gpu_pipeline_constant_value_free(imports_tuple2_string_gpu_pipeline_constant_value_t *ptr);

void wasi_webgpu_webgpu_option_gpu_compute_pass_descriptor_free(wasi_webgpu_webgpu_option_gpu_compute_pass_descriptor_t *ptr);

void wasi_webgpu_webgpu_option_gpu_command_buffer_descriptor_free(wasi_webgpu_webgpu_option_gpu_command_buffer_descriptor_t *ptr);

void wasi_webgpu_webgpu_option_borrow_gpu_bind_group_free(wasi_webgpu_webgpu_option_borrow_gpu_bind_group_t *ptr);

void imports_list_gpu_buffer_dynamic_offset_free(imports_list_gpu_buffer_dynamic_offset_t *ptr);

void imports_option_list_gpu_buffer_dynamic_offset_free(imports_option_list_gpu_buffer_dynamic_offset_t *ptr);

void wasi_webgpu_webgpu_list_borrow_gpu_render_bundle_free(wasi_webgpu_webgpu_list_borrow_gpu_render_bundle_t *ptr);

void wasi_webgpu_webgpu_option_borrow_gpu_buffer_free(wasi_webgpu_webgpu_option_borrow_gpu_buffer_t *ptr);

void imports_option_gpu_signed_offset32_free(imports_option_gpu_signed_offset32_t *ptr);

void wasi_webgpu_webgpu_option_gpu_render_bundle_descriptor_free(wasi_webgpu_webgpu_option_gpu_render_bundle_descriptor_t *ptr);

void wasi_webgpu_webgpu_list_borrow_gpu_command_buffer_free(wasi_webgpu_webgpu_list_borrow_gpu_command_buffer_t *ptr);

void imports_list_u8_free(imports_list_u8_t *ptr);

extern void wasi_io_poll_pollable_drop_own(wasi_io_poll_own_pollable_t handle);

extern wasi_io_poll_borrow_pollable_t wasi_io_poll_borrow_pollable(wasi_io_poll_own_pollable_t handle);

void wasi_io_poll_list_borrow_pollable_free(wasi_io_poll_list_borrow_pollable_t *ptr);

void imports_list_u32_free(imports_list_u32_t *ptr);

void imports_option_u32_free(imports_option_u32_t *ptr);

void wasi_webgpu_surface_create_desc_free(wasi_webgpu_surface_create_desc_t *ptr);

extern void wasi_webgpu_surface_surface_drop_own(wasi_webgpu_surface_own_surface_t handle);

extern wasi_webgpu_surface_borrow_surface_t wasi_webgpu_surface_borrow_surface(wasi_webgpu_surface_own_surface_t handle);

void wasi_webgpu_surface_option_key_free(wasi_webgpu_surface_option_key_t *ptr);

void wasi_webgpu_surface_key_event_free(wasi_webgpu_surface_key_event_t *ptr);

void wasi_webgpu_surface_option_resize_event_free(wasi_webgpu_surface_option_resize_event_t *ptr);

void wasi_webgpu_surface_option_frame_event_free(wasi_webgpu_surface_option_frame_event_t *ptr);

void wasi_webgpu_surface_option_pointer_event_free(wasi_webgpu_surface_option_pointer_event_t *ptr);

void wasi_webgpu_surface_option_key_event_free(wasi_webgpu_surface_option_key_event_t *ptr);

extern void wasi_webgpu_frame_buffer_device_drop_own(wasi_webgpu_frame_buffer_own_device_t handle);

extern wasi_webgpu_frame_buffer_borrow_device_t wasi_webgpu_frame_buffer_borrow_device(wasi_webgpu_frame_buffer_own_device_t handle);

extern void wasi_webgpu_frame_buffer_buffer_drop_own(wasi_webgpu_frame_buffer_own_buffer_t handle);

extern wasi_webgpu_frame_buffer_borrow_buffer_t wasi_webgpu_frame_buffer_borrow_buffer(wasi_webgpu_frame_buffer_own_buffer_t handle);

// Transfers ownership of `s` into the string `ret`
void imports_string_set(imports_string_t *ret, const char*s);

// Creates a copy of the input nul-terminate string `s` and
// stores it into the component model string `ret`.
void imports_string_dup(imports_string_t *ret, const char*s);

// Deallocates the string pointed to by `ret`, deallocating
// the memory behind the string.
void imports_string_free(imports_string_t *ret);

#ifdef __cplusplus
}
#endif
#endif
